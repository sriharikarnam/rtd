<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="hip__hcc_8cpp" kind="file" language="C++">
    <compoundname>hip_hcc.cpp</compoundname>
    <includes local="no">assert.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">list</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">deque</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">atomic</includes>
    <includes local="no">hc.hpp</includes>
    <includes local="no">hc_am.hpp</includes>
    <includes local="yes">hsa/hsa_ext_amd.h</includes>
    <includes refid="hip__runtime_8h" local="yes">hip/hip_runtime.h</includes>
    <includes refid="hip__hcc__internal_8h" local="yes">hip_hcc_internal.h</includes>
    <includes refid="trace__helper_8h" local="yes">trace_helper.h</includes>
    <includes refid="env_8h" local="yes">env.h</includes>
    <incdepgraph>
      <node id="932">
        <label>hip/hcc_detail/hip_runtime_api.h</label>
        <link refid="hcc__detail_2hip__runtime__api_8h"/>
        <childnode refid="910" relation="include">
        </childnode>
        <childnode refid="930" relation="include">
        </childnode>
        <childnode refid="911" relation="include">
        </childnode>
        <childnode refid="933" relation="include">
        </childnode>
        <childnode refid="931" relation="include">
        </childnode>
        <childnode refid="934" relation="include">
        </childnode>
        <childnode refid="935" relation="include">
        </childnode>
      </node>
      <node id="913">
        <label>list</label>
      </node>
      <node id="919">
        <label>atomic</label>
      </node>
      <node id="939">
        <label>hip/hcc_detail/texture_types.h</label>
        <link refid="hcc__detail_2texture__types_8h_source"/>
        <childnode refid="934" relation="include">
        </childnode>
      </node>
      <node id="952">
        <label>iomanip</label>
      </node>
      <node id="944">
        <label>hip/hcc_detail/device_functions.h</label>
        <link refid="hcc__detail_2device__functions_8h_source"/>
        <childnode refid="923" relation="include">
        </childnode>
        <childnode refid="943" relation="include">
        </childnode>
      </node>
      <node id="948">
        <label>hsa/hsa.h</label>
      </node>
      <node id="908">
        <label>HIP/src/hip_hcc.cpp</label>
        <link refid="hip_hcc.cpp"/>
        <childnode refid="909" relation="include">
        </childnode>
        <childnode refid="910" relation="include">
        </childnode>
        <childnode refid="911" relation="include">
        </childnode>
        <childnode refid="912" relation="include">
        </childnode>
        <childnode refid="913" relation="include">
        </childnode>
        <childnode refid="914" relation="include">
        </childnode>
        <childnode refid="915" relation="include">
        </childnode>
        <childnode refid="916" relation="include">
        </childnode>
        <childnode refid="917" relation="include">
        </childnode>
        <childnode refid="918" relation="include">
        </childnode>
        <childnode refid="919" relation="include">
        </childnode>
        <childnode refid="920" relation="include">
        </childnode>
        <childnode refid="921" relation="include">
        </childnode>
        <childnode refid="922" relation="include">
        </childnode>
        <childnode refid="923" relation="include">
        </childnode>
        <childnode refid="947" relation="include">
        </childnode>
        <childnode refid="951" relation="include">
        </childnode>
        <childnode refid="950" relation="include">
        </childnode>
      </node>
      <node id="909">
        <label>assert.h</label>
      </node>
      <node id="941">
        <label>hip/hcc_detail/math_functions.h</label>
        <link refid="hcc__detail_2math__functions_8h_source"/>
        <childnode refid="942" relation="include">
        </childnode>
        <childnode refid="923" relation="include">
        </childnode>
        <childnode refid="943" relation="include">
        </childnode>
        <childnode refid="944" relation="include">
        </childnode>
      </node>
      <node id="942">
        <label>kalmar_math.h</label>
      </node>
      <node id="937">
        <label>hip/hcc_detail/channel_descriptor.h</label>
        <link refid="hcc__detail_2channel__descriptor_8h_source"/>
        <childnode refid="934" relation="include">
        </childnode>
        <childnode refid="938" relation="include">
        </childnode>
      </node>
      <node id="910">
        <label>stdint.h</label>
      </node>
      <node id="925">
        <label>stdlib.h</label>
      </node>
      <node id="921">
        <label>hc_am.hpp</label>
      </node>
      <node id="940">
        <label>grid_launch.h</label>
      </node>
      <node id="953">
        <label>string</label>
      </node>
      <node id="946">
        <label>hc_short_vector.hpp</label>
      </node>
      <node id="934">
        <label>hip/hcc_detail/driver_types.h</label>
        <link refid="hcc__detail_2driver__types_8h_source"/>
      </node>
      <node id="930">
        <label>stddef.h</label>
      </node>
      <node id="920">
        <label>hc.hpp</label>
      </node>
      <node id="936">
        <label>limits.h</label>
      </node>
      <node id="922">
        <label>hsa/hsa_ext_amd.h</label>
      </node>
      <node id="950">
        <label>env.h</label>
        <link refid="env_8h_source"/>
      </node>
      <node id="949">
        <label>hip_util.h</label>
        <link refid="hip__util_8h_source"/>
        <childnode refid="909" relation="include">
        </childnode>
        <childnode refid="910" relation="include">
        </childnode>
        <childnode refid="911" relation="include">
        </childnode>
        <childnode refid="912" relation="include">
        </childnode>
        <childnode refid="913" relation="include">
        </childnode>
        <childnode refid="914" relation="include">
        </childnode>
        <childnode refid="915" relation="include">
        </childnode>
        <childnode refid="916" relation="include">
        </childnode>
        <childnode refid="917" relation="include">
        </childnode>
        <childnode refid="918" relation="include">
        </childnode>
      </node>
      <node id="927">
        <label>hip/hcc_detail/hip_runtime.h</label>
        <link refid="hcc__detail_2hip__runtime_8h"/>
        <childnode refid="928" relation="include">
        </childnode>
        <childnode refid="929" relation="include">
        </childnode>
        <childnode refid="930" relation="include">
        </childnode>
        <childnode refid="931" relation="include">
        </childnode>
        <childnode refid="940" relation="include">
        </childnode>
        <childnode refid="933" relation="include">
        </childnode>
        <childnode refid="941" relation="include">
        </childnode>
        <childnode refid="944" relation="include">
        </childnode>
        <childnode refid="945" relation="include">
        </childnode>
      </node>
      <node id="914">
        <label>sys/types.h</label>
      </node>
      <node id="929">
        <label>string.h</label>
      </node>
      <node id="923">
        <label>hip/hip_runtime.h</label>
        <link refid="hip__runtime_8h_source"/>
        <childnode refid="910" relation="include">
        </childnode>
        <childnode refid="924" relation="include">
        </childnode>
        <childnode refid="925" relation="include">
        </childnode>
        <childnode refid="909" relation="include">
        </childnode>
        <childnode refid="926" relation="include">
        </childnode>
        <childnode refid="927" relation="include">
        </childnode>
        <childnode refid="931" relation="include">
        </childnode>
        <childnode refid="943" relation="include">
        </childnode>
      </node>
      <node id="915">
        <label>unistd.h</label>
      </node>
      <node id="917">
        <label>vector</label>
      </node>
      <node id="938">
        <label>hip/hcc_detail/hip_vector_types.h</label>
        <link refid="hcc__detail_2hip__vector__types_8h"/>
        <childnode refid="933" relation="include">
        </childnode>
      </node>
      <node id="912">
        <label>sstream</label>
      </node>
      <node id="951">
        <label>trace_helper.h</label>
        <link refid="trace__helper_8h_source"/>
        <childnode refid="911" relation="include">
        </childnode>
        <childnode refid="952" relation="include">
        </childnode>
        <childnode refid="953" relation="include">
        </childnode>
      </node>
      <node id="926">
        <label>hip/hip_common.h</label>
        <link refid="hip__common_8h_source"/>
      </node>
      <node id="928">
        <label>math.h</label>
      </node>
      <node id="931">
        <label>hip/hip_runtime_api.h</label>
        <link refid="hip__runtime__api_8h_source"/>
        <childnode refid="929" relation="include">
        </childnode>
        <childnode refid="926" relation="include">
        </childnode>
        <childnode refid="932" relation="include">
        </childnode>
      </node>
      <node id="947">
        <label>hip_hcc_internal.h</label>
        <link refid="hip__hcc__internal_8h_source"/>
        <childnode refid="920" relation="include">
        </childnode>
        <childnode refid="948" relation="include">
        </childnode>
        <childnode refid="922" relation="include">
        </childnode>
        <childnode refid="923" relation="include">
        </childnode>
        <childnode refid="949" relation="include">
        </childnode>
        <childnode refid="950" relation="include">
        </childnode>
      </node>
      <node id="911">
        <label>iostream</label>
      </node>
      <node id="916">
        <label>deque</label>
      </node>
      <node id="945">
        <label>hip/hcc_detail/texture_functions.h</label>
        <link refid="texture__functions_8h_source"/>
        <childnode refid="920" relation="include">
        </childnode>
        <childnode refid="946" relation="include">
        </childnode>
        <childnode refid="935" relation="include">
        </childnode>
      </node>
      <node id="918">
        <label>algorithm</label>
      </node>
      <node id="943">
        <label>hip/hip_vector_types.h</label>
        <link refid="hip__vector__types_8h_source"/>
        <childnode refid="926" relation="include">
        </childnode>
      </node>
      <node id="935">
        <label>hip/hcc_detail/hip_texture_types.h</label>
        <link refid="hcc__detail_2hip__texture__types_8h"/>
        <childnode refid="936" relation="include">
        </childnode>
        <childnode refid="937" relation="include">
        </childnode>
        <childnode refid="939" relation="include">
        </childnode>
      </node>
      <node id="924">
        <label>stdio.h</label>
      </node>
      <node id="933">
        <label>hip/hcc_detail/host_defines.h</label>
        <link refid="host__defines_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="hip__hcc_8cpp_1aea6f15cc8a65f027003f4b0e77a41fc8" prot="public" static="no">
        <name>ErrorCheck</name>
        <param><defname>x</defname></param>
        <initializer>error_check(x, __LINE__, __FILE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="619" column="9" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hip__hcc_8cpp_1a70838c4fa8cfbdb44e3b771caf2ccda3" prot="public" static="no">
        <name>DeviceErrorCheck</name>
        <param><defname>x</defname></param>
        <initializer>if (x != HSA_STATUS_SUCCESS) { return <ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a07ab9b704ea693c1781a52741c60cd0d" kindref="member">hipErrorInvalidDevice</ref>; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="738" column="9" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hip__hcc_8cpp_1a4de52c454435d124b61949761ea2250c" prot="public" static="no">
        <name>CASE_STRING</name>
        <param><defname>X</defname></param>
        <initializer>case X: return #X ;break;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1714" column="9" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1714" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="hip__hcc_8cpp_1af27ee928e1f3e786c464c52839294319" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int release</definition>
        <argsstring></argsstring>
        <name>release</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="54" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1ae113b586dc931f0a55eee6312a37220b" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* API_COLOR</definition>
        <argsstring></argsstring>
        <name>API_COLOR</name>
        <initializer>= KGRN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="56" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a5a2b20416f6d33114f94c53addcec0fa" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* API_COLOR_END</definition>
        <argsstring></argsstring>
        <name>API_COLOR_END</name>
        <initializer>= KNRM</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="57" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a8049b329f2663b4572d81e7a9aa8a155" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_LAUNCH_BLOCKING</definition>
        <argsstring></argsstring>
        <name>HIP_LAUNCH_BLOCKING</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="59" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a190ac45fb0648d9f9576009a047351a1" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string HIP_LAUNCH_BLOCKING_KERNELS</definition>
        <argsstring></argsstring>
        <name>HIP_LAUNCH_BLOCKING_KERNELS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="60" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1ac98946d0b8f4abcb436286569afc3beb" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; g_hipLaunchBlockingKernels</definition>
        <argsstring></argsstring>
        <name>g_hipLaunchBlockingKernels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="61" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a54d5c40680baecda7ae8406839275a69" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_API_BLOCKING</definition>
        <argsstring></argsstring>
        <name>HIP_API_BLOCKING</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="62" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a1e1c85dbb250f1acfb484c1be1f3b28a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_PRINT_ENV</definition>
        <argsstring></argsstring>
        <name>HIP_PRINT_ENV</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="65" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1aae9c541f3e25b8f002762337a03fec28" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_TRACE_API</definition>
        <argsstring></argsstring>
        <name>HIP_TRACE_API</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="66" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1acea1669446f60f83052a098464cee32a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_PROFILE_API</definition>
        <argsstring></argsstring>
        <name>HIP_PROFILE_API</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="68" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1abbd2f3858a21a34e6e2e04bcb7ac248e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string HIP_DB_START_API</definition>
        <argsstring></argsstring>
        <name>HIP_DB_START_API</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="71" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a40fc01e6dfff2ada06b5db9a0bcaba16" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string HIP_DB_STOP_API</definition>
        <argsstring></argsstring>
        <name>HIP_DB_STOP_API</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="72" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a8eadc52d4f7b612393d41f8c9581a8ca" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_DB</definition>
        <argsstring></argsstring>
        <name>HIP_DB</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="73" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a52375928714da2fcf0281c34eccc3ca4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_VISIBLE_DEVICES</definition>
        <argsstring></argsstring>
        <name>HIP_VISIBLE_DEVICES</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="74" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a02995e5bc53a521e20c4b6a6f7e907ef" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_WAIT_MODE</definition>
        <argsstring></argsstring>
        <name>HIP_WAIT_MODE</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="75" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a95d35322c735019e684cc1da08bed2fd" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_FORCE_P2P_HOST</definition>
        <argsstring></argsstring>
        <name>HIP_FORCE_P2P_HOST</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="77" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a8c77550ad6bc00398cea17a16bc04133" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_FAIL_SOC</definition>
        <argsstring></argsstring>
        <name>HIP_FAIL_SOC</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="78" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a29d22023754d1fcc4b12baa73a7a6551" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_DENY_PEER_ACCESS</definition>
        <argsstring></argsstring>
        <name>HIP_DENY_PEER_ACCESS</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="79" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1aea0f71cb99822e7cfff9b815924c7cde" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_HIDDEN_FREE_MEM</definition>
        <argsstring></argsstring>
        <name>HIP_HIDDEN_FREE_MEM</name>
        <initializer>= 256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="81" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1ab1522bf2d27cd1d4af3dbbb8e57fd312" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_FORCE_SYNC_COPY</definition>
        <argsstring></argsstring>
        <name>HIP_FORCE_SYNC_COPY</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="83" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a68b5d271d9267d08dcce9d473238be8f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_EVENT_SYS_RELEASE</definition>
        <argsstring></argsstring>
        <name>HIP_EVENT_SYS_RELEASE</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="86" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1ac053a0c53b9c93cfec98c6e2f9a4ab6e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_HOST_COHERENT</definition>
        <argsstring></argsstring>
        <name>HIP_HOST_COHERENT</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="87" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a04bfa7d7e9fb44412d2f73a8bc2626f9" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_SYNC_HOST_ALLOC</definition>
        <argsstring></argsstring>
        <name>HIP_SYNC_HOST_ALLOC</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="89" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a2c24a46e309f5f39132b858808b22c3c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_INIT_ALLOC</definition>
        <argsstring></argsstring>
        <name>HIP_INIT_ALLOC</name>
        <initializer>=-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="92" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a0e8d70eb20f09424674ebfd07724ac90" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_SYNC_STREAM_WAIT</definition>
        <argsstring></argsstring>
        <name>HIP_SYNC_STREAM_WAIT</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="93" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a1b7a62ed1312d84bec41ac3a0591b627" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_FORCE_NULL_STREAM</definition>
        <argsstring></argsstring>
        <name>HIP_FORCE_NULL_STREAM</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="94" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a6bcfd17d46b509b81b86e3362ea61bd8" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HIP_SYNC_NULL_STREAM</definition>
        <argsstring></argsstring>
        <name>HIP_SYNC_NULL_STREAM</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="105" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a98ead8a3566b42af91581a7c1a50408e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int HCC_OPT_FLUSH</definition>
        <argsstring></argsstring>
        <name>HCC_OPT_FLUSH</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="113" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1aae9776b40d05a39ead2dd0df7d82e46d" prot="public" static="no" mutable="no">
        <type>std::once_flag</type>
        <definition>std::once_flag hip_initialized</definition>
        <argsstring></argsstring>
        <name>hip_initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="122" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1af31c3743df731bc7b5f69394373e150f" prot="public" static="no" mutable="no">
        <type><ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref> **</type>
        <definition>ihipDevice_t** g_deviceArray</definition>
        <argsstring></argsstring>
        <name>g_deviceArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="125" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a01218bb30329b40a2ab1d0415f22ab66" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_visible_device</definition>
        <argsstring></argsstring>
        <name>g_visible_device</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="128" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a1b38b36a8c253987e835cc92fcaa2d59" prot="public" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned g_deviceCnt</definition>
        <argsstring></argsstring>
        <name>g_deviceCnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="129" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a0e9a8ca1ff3d01b85c12ff0d65e07cbe" prot="public" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; g_hip_visible_devices</definition>
        <argsstring></argsstring>
        <name>g_hip_visible_devices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="130" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a51cbfc1cd7ef93745edcd0486cb2257e" prot="public" static="no" mutable="no">
        <type>hsa_agent_t</type>
        <definition>hsa_agent_t g_cpu_agent</definition>
        <argsstring></argsstring>
        <name>g_cpu_agent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="131" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a5b8ea47b77c1eed6d1e52fd5ed2be71e" prot="public" static="no" mutable="no">
        <type>hsa_agent_t *</type>
        <definition>hsa_agent_t* g_allAgents</definition>
        <argsstring></argsstring>
        <name>g_allAgents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="132" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a1b7007a2e913a86e864cb2dcec834ea5" prot="public" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned g_numLogicalThreads</definition>
        <argsstring></argsstring>
        <name>g_numLogicalThreads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="133" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a3b90ef2f2d7c810029b7ee76e1bbbabe" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structProfTrigger" kindref="compound">ProfTrigger</ref> &gt;</type>
        <definition>std::vector&lt;ProfTrigger&gt; g_dbStartTriggers</definition>
        <argsstring></argsstring>
        <name>g_dbStartTriggers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="139" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1ab4087d6ee4d028cff99fef20daf3e3e3" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structProfTrigger" kindref="compound">ProfTrigger</ref> &gt;</type>
        <definition>std::vector&lt;ProfTrigger&gt; g_dbStopTriggers</definition>
        <argsstring></argsstring>
        <name>g_dbStopTriggers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="140" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a40479a2de3cfe04b98028668d3297ed5" prot="public" static="no" mutable="no">
        <type>thread_local <ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref></type>
        <definition>thread_local hipError_t tls_lastHipError</definition>
        <argsstring></argsstring>
        <name>tls_lastHipError</name>
        <initializer>= <ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aadfbdb847b149723c684ebd764556063" kindref="member">hipSuccess</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="148" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1a3f54bc9c8ffa56d0d0783a2aef20a60d" prot="public" static="no" mutable="no">
        <type>thread_local <ref refid="classTidInfo" kindref="compound">TidInfo</ref></type>
        <definition>thread_local TidInfo tls_tidInfo</definition>
        <argsstring></argsstring>
        <name>tls_tidInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="151" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hip__hcc_8cpp_1ad21b818ac7f11e14c180d1dc52df7d32" prot="public" static="yes" mutable="no">
        <type>thread_local <ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref> *</type>
        <definition>thread_local ihipCtx_t* tls_defaultCtx</definition>
        <argsstring></argsstring>
        <name>tls_defaultCtx</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="211" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="hip__hcc_8cpp_1a9362c02057e17633609cc5e95677e0f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string HIP_TRACE_API_COLOR</definition>
        <argsstring>(&quot;green&quot;)</argsstring>
        <name>HIP_TRACE_API_COLOR</name>
        <param>
          <type>&quot;green&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1aaefabc3112e54b4524949d751cdfcd41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; g_lastShortTid</definition>
        <argsstring>(1)</argsstring>
        <name>g_lastShortTid</name>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1ad26f03454ac094309a835ada39e8615d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void recordApiTrace</definition>
        <argsstring>(std::string *fullStr, const std::string &amp;apiStr)</argsstring>
        <name>recordApiTrace</name>
        <param>
          <type>std::string *</type>
          <declname>fullStr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>apiStr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="159" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="159" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a6b757c65ad5297fe157db573038ef12b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ihipIsValidDevice</definition>
        <argsstring>(unsigned deviceIndex)</argsstring>
        <name>ihipIsValidDevice</name>
        <param>
          <type>unsigned</type>
          <declname>deviceIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="188" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="188" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a0600188940786329452dafea4ee6bd9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref> *</type>
        <definition>ihipDevice_t* ihipGetDevice</definition>
        <argsstring>(int deviceIndex)</argsstring>
        <name>ihipGetDevice</name>
        <param>
          <type>int</type>
          <declname>deviceIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="195" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="195" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a3fbe38c4899396a8862bbd0255a7734e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref> *</type>
        <definition>ihipCtx_t* ihipGetPrimaryCtx</definition>
        <argsstring>(unsigned deviceIndex)</argsstring>
        <name>ihipGetPrimaryCtx</name>
        <param>
          <type>unsigned</type>
          <declname>deviceIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="204" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="204" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a810fc134741863a7749cc4eacb427b30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ihipSetTlsDefaultCtx</definition>
        <argsstring>(ihipCtx_t *ctx)</argsstring>
        <name>ihipSetTlsDefaultCtx</name>
        <param>
          <type><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="212" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1ae8d1ec6d95d9ca50e98505af1b4da055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref> *</type>
        <definition>ihipCtx_t* ihipGetTlsDefaultCtx</definition>
        <argsstring>()</argsstring>
        <name>ihipGetTlsDefaultCtx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="223" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="223" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a8b4a69d35d2651a9921ccbba8625fdd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref></type>
        <definition>hipError_t ihipSynchronize</definition>
        <argsstring>(void)</argsstring>
        <name>ihipSynchronize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="232" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a93c32584eb46790f4947ef90da127613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void error_check</definition>
        <argsstring>(hsa_status_t hsa_error_code, int line_num, std::string str)</argsstring>
        <name>error_check</name>
        <param>
          <type>hsa_status_t</type>
          <declname>hsa_error_code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line_num</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="621" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="621" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1aef798c25956b62511c42a5c10d89ebce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hsa_status_t</type>
        <definition>static hsa_status_t countGpuAgents</definition>
        <argsstring>(hsa_agent_t agent, void *data)</argsstring>
        <name>countGpuAgents</name>
        <param>
          <type>hsa_agent_t</type>
          <declname>agent</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="632" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="632" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a9c51e08c67fd7d86046fdf7f782795ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hsa_status_t</type>
        <definition>hsa_status_t FindGpuDevice</definition>
        <argsstring>(hsa_agent_t agent, void *data)</argsstring>
        <name>FindGpuDevice</name>
        <param>
          <type>hsa_agent_t</type>
          <declname>agent</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="650" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="650" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1ab57794d7c45100410525f474dfecde48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hsa_status_t</type>
        <definition>hsa_status_t GetDevicePool</definition>
        <argsstring>(hsa_amd_memory_pool_t pool, void *data)</argsstring>
        <name>GetDevicePool</name>
        <param>
          <type>hsa_amd_memory_pool_t</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="670" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="670" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1abb4fd9a826054adae472a160567f416a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int checkAccess</definition>
        <argsstring>(hsa_agent_t agent, hsa_amd_memory_pool_t pool)</argsstring>
        <name>checkAccess</name>
        <param>
          <type>hsa_agent_t</type>
          <declname>agent</declname>
        </param>
        <param>
          <type>hsa_amd_memory_pool_t</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="689" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="689" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a99c93b4d7033368f833c44f8b7b6208b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hsa_status_t</type>
        <definition>hsa_status_t get_region_info</definition>
        <argsstring>(hsa_region_t region, void *data)</argsstring>
        <name>get_region_info</name>
        <param>
          <type>hsa_region_t</type>
          <declname>region</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="698" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="698" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1ada6e23e34d7b867b37cf9093394485cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hsa_status_t</type>
        <definition>static hsa_status_t findCpuAgent</definition>
        <argsstring>(hsa_agent_t agent, void *data)</argsstring>
        <name>findCpuAgent</name>
        <param>
          <type>hsa_agent_t</type>
          <declname>agent</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="722" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="722" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a97e179c4ef64e41e9aa76c88ed03dc36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string HIP_DB_string</definition>
        <argsstring>(unsigned db)</argsstring>
        <name>HIP_DB_string</name>
        <param>
          <type>unsigned</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1095" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1095" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1aa3fc39fab3f83554615bd5ab92227e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string HIP_DB_callback</definition>
        <argsstring>(void *var_ptr, const char *envVarString)</argsstring>
        <name>HIP_DB_callback</name>
        <param>
          <type>void *</type>
          <declname>var_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>envVarString</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1116" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1116" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a25a81b9cc06b13d6bfba4de61a1bc11c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string HIP_VISIBLE_DEVICES_callback</definition>
        <argsstring>(void *var_ptr, const char *envVarString)</argsstring>
        <name>HIP_VISIBLE_DEVICES_callback</name>
        <param>
          <type>void *</type>
          <declname>var_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>envVarString</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1143" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1143" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a6b2e2048637625500cd2bedf85c55d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parseTrigger</definition>
        <argsstring>(std::string triggerString, std::vector&lt; ProfTrigger &gt; &amp;profTriggers)</argsstring>
        <name>parseTrigger</name>
        <param>
          <type>std::string</type>
          <declname>triggerString</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structProfTrigger" kindref="compound">ProfTrigger</ref> &gt; &amp;</type>
          <declname>profTriggers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1173" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1173" bodyend="1208"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a6f61c90d09279d46c6a66bf9e3076745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HipReadEnv</definition>
        <argsstring>()</argsstring>
        <name>HipReadEnv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1211" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1211" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1aeabe36aa946ab6100b26602c7e3c23cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ihipInit</definition>
        <argsstring>()</argsstring>
        <name>ihipInit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1324" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1324" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1aaf16ac37517d2e0a1642f822b7aafe0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
        <definition>hipStream_t ihipSyncAndResolveStream</definition>
        <argsstring>(hipStream_t stream)</argsstring>
        <name>ihipSyncAndResolveStream</name>
        <param>
          <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1404" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1404" bodyend="1454"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a1fb023def4130dfde40fb56661ef1c2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ihipPrintKernelLaunch</definition>
        <argsstring>(const char *kernelName, const grid_launch_parm *lp, const hipStream_t stream)</argsstring>
        <name>ihipPrintKernelLaunch</name>
        <param>
          <type>const char *</type>
          <declname>kernelName</declname>
        </param>
        <param>
          <type>const grid_launch_parm *</type>
          <declname>lp</declname>
        </param>
        <param>
          <type>const <ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1456" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1456" bodyend="1481"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1ab8b2a8d18dcd1c6132292fa1f77ab216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
        <definition>hipStream_t ihipPreLaunchKernel</definition>
        <argsstring>(hipStream_t stream, dim3 grid, dim3 block, grid_launch_parm *lp, const char *kernelNameStr)</argsstring>
        <name>ihipPreLaunchKernel</name>
        <param>
          <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="structdim3" kindref="compound">dim3</ref></type>
          <declname>grid</declname>
        </param>
        <param>
          <type><ref refid="structdim3" kindref="compound">dim3</ref></type>
          <declname>block</declname>
        </param>
        <param>
          <type>grid_launch_parm *</type>
          <declname>lp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>kernelNameStr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1485" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1485" bodyend="1504"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1afc884a98dc7efc7feff317e284b0f3b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
        <definition>hipStream_t ihipPreLaunchKernel</definition>
        <argsstring>(hipStream_t stream, size_t grid, dim3 block, grid_launch_parm *lp, const char *kernelNameStr)</argsstring>
        <name>ihipPreLaunchKernel</name>
        <param>
          <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>grid</declname>
        </param>
        <param>
          <type><ref refid="structdim3" kindref="compound">dim3</ref></type>
          <declname>block</declname>
        </param>
        <param>
          <type>grid_launch_parm *</type>
          <declname>lp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>kernelNameStr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1507" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1507" bodyend="1525"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1ad9fe301ff284facb9648eca70d1f5069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
        <definition>hipStream_t ihipPreLaunchKernel</definition>
        <argsstring>(hipStream_t stream, dim3 grid, size_t block, grid_launch_parm *lp, const char *kernelNameStr)</argsstring>
        <name>ihipPreLaunchKernel</name>
        <param>
          <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="structdim3" kindref="compound">dim3</ref></type>
          <declname>grid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>block</declname>
        </param>
        <param>
          <type>grid_launch_parm *</type>
          <declname>lp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>kernelNameStr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1528" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1528" bodyend="1546"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a04bfaa3d06b653d76dfc56d85947b1e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
        <definition>hipStream_t ihipPreLaunchKernel</definition>
        <argsstring>(hipStream_t stream, size_t grid, size_t block, grid_launch_parm *lp, const char *kernelNameStr)</argsstring>
        <name>ihipPreLaunchKernel</name>
        <param>
          <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>block</declname>
        </param>
        <param>
          <type>grid_launch_parm *</type>
          <declname>lp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>kernelNameStr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1549" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1549" bodyend="1569"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a950dac9ba5275dbc5ee6f509609cdb61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ihipPostLaunchKernel</definition>
        <argsstring>(const char *kernelName, hipStream_t stream, grid_launch_parm &amp;lp)</argsstring>
        <name>ihipPostLaunchKernel</name>
        <param>
          <type>const char *</type>
          <declname>kernelName</declname>
        </param>
        <param>
          <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>grid_launch_parm &amp;</type>
          <declname>lp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1575" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1575" bodyend="1581"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1ae051e3d5b5904889c7cbc658c819ff47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ihipErrorString</definition>
        <argsstring>(hipError_t hip_error)</argsstring>
        <name>ihipErrorString</name>
        <param>
          <type><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref></type>
          <declname>hip_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1599" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1599" bodyend="1665"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1af322113199a3aed4af3ee19df7e4796d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* hipMemcpyStr</definition>
        <argsstring>(unsigned memKind)</argsstring>
        <name>hipMemcpyStr</name>
        <param>
          <type>unsigned</type>
          <declname>memKind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1716" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1716" bodyend="1726"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a0449b3919991350802d9974da1c24f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* hcMemcpyStr</definition>
        <argsstring>(hc::hcCommandKind memKind)</argsstring>
        <name>hcMemcpyStr</name>
        <param>
          <type>hc::hcCommandKind</type>
          <declname>memKind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1728" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1728" bodyend="1739"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1addefbc644a0fe7fad519c7ff39e728df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printPointerInfo</definition>
        <argsstring>(unsigned dbFlag, const char *tag, const void *ptr, const hc::AmPointerInfo &amp;ptrInfo)</argsstring>
        <name>printPointerInfo</name>
        <param>
          <type>unsigned</type>
          <declname>dbFlag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const hc::AmPointerInfo &amp;</type>
          <declname>ptrInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1816" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1816" bodyend="1822"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a810ca58f95dfba6e2152662ab0ed6e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tailorPtrInfo</definition>
        <argsstring>(hc::AmPointerInfo *ptrInfo, const void *ptr, size_t sizeBytes)</argsstring>
        <name>tailorPtrInfo</name>
        <param>
          <type>hc::AmPointerInfo *</type>
          <declname>ptrInfo</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1828" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1828" bodyend="1866"/>
      </memberdef>
      <memberdef kind="function" id="hip__hcc_8cpp_1a1183b5a484a7480a12ae354b0d6e6acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool getTailoredPtrInfo</definition>
        <argsstring>(hc::AmPointerInfo *ptrInfo, const void *ptr, size_t sizeBytes)</argsstring>
        <name>getTailoredPtrInfo</name>
        <param>
          <type>hc::AmPointerInfo *</type>
          <declname>ptrInfo</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="1869" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="1869" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="group__Profiler_1ga40aa20d731f9c8f0586127d589759e1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref></type>
        <definition>hipError_t hipProfilerStart</definition>
        <argsstring>()</argsstring>
        <name>hipProfilerStart</name>
        <briefdescription>
<para>Start recording of profiling information When using this API, start the profiler with profiling disabled. (<ndash/>startdisabled) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>: hipProfilerStart API is under development. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="2101" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="2101" bodyend="2109"/>
      </memberdef>
      <memberdef kind="function" id="group__Profiler_1ga777994cae0f7bdef24131fc1f3ed626e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref></type>
        <definition>hipError_t hipProfilerStop</definition>
        <argsstring>()</argsstring>
        <name>hipProfilerStop</name>
        <briefdescription>
<para>Stop recording of profiling information. When using this API, start the profiler with profiling disabled. (<ndash/>startdisabled) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>: hipProfilerStop API is under development. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="2112" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="2112" bodyend="2120"/>
      </memberdef>
      <memberdef kind="function" id="group__HCC-specific_1ga0d24b3157fd1b16d38672bb157ec4cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref></type>
        <definition>hipError_t hipHccGetAccelerator</definition>
        <argsstring>(int deviceId, hc::accelerator *acc)</argsstring>
        <name>hipHccGetAccelerator</name>
        <param>
          <type>int</type>
          <declname>deviceId</declname>
        </param>
        <param>
          <type>hc::accelerator *</type>
          <declname>acc</declname>
        </param>
        <briefdescription>
<para>Return hc::accelerator associated with the specified deviceId. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aadfbdb847b149723c684ebd764556063" kindref="member">hipSuccess</ref>, <ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a07ab9b704ea693c1781a52741c60cd0d" kindref="member">hipErrorInvalidDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="2128" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="2128" bodyend="2141"/>
      </memberdef>
      <memberdef kind="function" id="group__HCC-specific_1ga1a7087ea9c3c3323270d7cce73650b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref></type>
        <definition>hipError_t hipHccGetAcceleratorView</definition>
        <argsstring>(hipStream_t stream, hc::accelerator_view **av)</argsstring>
        <name>hipHccGetAcceleratorView</name>
        <param>
          <type><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>hc::accelerator_view **</type>
          <declname>av</declname>
        </param>
        <briefdescription>
<para>Return hc::accelerator_view associated with the specified stream. </para>        </briefdescription>
        <detaileddescription>
<para>If stream is 0, the accelerator_view for the default stream is returned. <simplesect kind="return"><para><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aadfbdb847b149723c684ebd764556063" kindref="member">hipSuccess</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" line="2145" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp" bodystart="2145" bodyend="2158"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains definitions for functions that are large enough that we don&apos;t want to inline them everywhere. This file is compiled and linked into apps running HIP / HCC path. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>present<sp/>Advanced<sp/>Micro<sp/>Devices,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="5"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6"><highlight class="comment">in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7"><highlight class="comment">to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="8"><highlight class="comment">copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="9"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline lineno="12"><highlight class="comment">all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="17"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="18"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment">THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hc.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hc_am.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hsa/hsa_ext_amd.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hip/hip_runtime.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hip_hcc_internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;trace_helper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;env.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//Global<sp/>variables:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>release<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*API_COLOR<sp/>=<sp/>KGRN;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*API_COLOR_END<sp/>=<sp/>KNRM;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_LAUNCH_BLOCKING<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">std::string<sp/>HIP_LAUNCH_BLOCKING_KERNELS;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">std::vector&lt;std::string&gt;<sp/>g_hipLaunchBlockingKernels;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_API_BLOCKING<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_PRINT_ENV<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_TRACE_API=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">std::string<sp/>HIP_TRACE_API_COLOR(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_PROFILE_API=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>DB_START/STOP<sp/>need<sp/>more<sp/>testing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">std::string<sp/>HIP_DB_START_API;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">std::string<sp/>HIP_DB_STOP_API;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_DB=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_VISIBLE_DEVICES<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_WAIT_MODE<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_FORCE_P2P_HOST<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_FAIL_SOC<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_DENY_PEER_ACCESS<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_HIDDEN_FREE_MEM<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Force<sp/>async<sp/>copies<sp/>to<sp/>actually<sp/>use<sp/>the<sp/>synchronous<sp/>copy<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_FORCE_SYNC_COPY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>set<sp/>these<sp/>to<sp/>0<sp/>and<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_EVENT_SYS_RELEASE=0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_HOST_COHERENT<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_SYNC_HOST_ALLOC<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_INIT_ALLOC=-1;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_SYNC_STREAM_WAIT<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_FORCE_NULL_STREAM=0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__hcc_workweek__<sp/>&gt;=<sp/>17300)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we<sp/>have<sp/>required<sp/>bug<sp/>fix<sp/>in<sp/>HCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Perform<sp/>resolution<sp/>on<sp/>the<sp/>GPU:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Chicken<sp/>bit<sp/>to<sp/>sync<sp/>on<sp/>host<sp/>to<sp/>implement<sp/>null<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>0,<sp/>null<sp/>stream<sp/>synchronization<sp/>is<sp/>performed<sp/>on<sp/>the<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_SYNC_NULL_STREAM<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HIP_SYNC_NULL_STREAM<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HIP<sp/>needs<sp/>to<sp/>change<sp/>some<sp/>behavior<sp/>based<sp/>on<sp/>HCC_OPT_FLUSH<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__hcc_workweek__<sp/>&gt;=<sp/>17296)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HCC_OPT_FLUSH<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#warning<sp/>&quot;HIP<sp/>disabled<sp/>HCC_OPT_FLUSH<sp/>since<sp/>HCC<sp/>version<sp/>does<sp/>not<sp/>yet<sp/>support&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HCC_OPT_FLUSH<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">std::once_flag<sp/>hip_initialized;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>devices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref><sp/>**g_deviceArray;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_visible_device<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>g_deviceCnt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">std::vector&lt;int&gt;<sp/>g_hip_visible_devices;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">hsa_agent_t<sp/>g_cpu_agent;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">hsa_agent_t<sp/>*g_allAgents;<sp/></highlight><highlight class="comment">//<sp/>CPU<sp/>agents<sp/>+<sp/>all<sp/>the<sp/>visible<sp/>GPU<sp/>agents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>g_numLogicalThreads;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">std::atomic&lt;int&gt;<sp/>g_lastShortTid(1);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Indexed<sp/>by<sp/>short-tid:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">std::vector&lt;ProfTrigger&gt;<sp/>g_dbStartTriggers;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">std::vector&lt;ProfTrigger&gt;<sp/>g_dbStopTriggers;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Thread-local<sp/>storage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>implicit<sp/>context<sp/>used<sp/>by<sp/>all<sp/>HIP<sp/>commands.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>be<sp/>set<sp/>by<sp/>hipSetDevice<sp/>or<sp/>by<sp/>the<sp/>CTX<sp/>manipulation<sp/>commands:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">thread_local<sp/><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref><sp/>tls_lastHipError<sp/>=<sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aadfbdb847b149723c684ebd764556063" kindref="member">hipSuccess</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">thread_local<sp/><ref refid="classTidInfo" kindref="compound">TidInfo</ref><sp/>tls_tidInfo;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Top-level<sp/>&quot;free&quot;<sp/>functions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>recordApiTrace(std::string<sp/>*fullStr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;apiStr)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>apiSeqNum<sp/>=<sp/>tls_tidInfo.apiSeqNum();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>tls_tidInfo.tid();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tid<sp/>&lt;<sp/>g_dbStartTriggers.size())<sp/>&amp;&amp;<sp/>(apiSeqNum<sp/>&gt;=<sp/>g_dbStartTriggers[tid].nextTrigger()))<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;info:<sp/>resume<sp/>profiling<sp/>at<sp/>%lu\n&quot;</highlight><highlight class="normal">,<sp/>apiSeqNum);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RESUME_PROFILING;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_dbStartTriggers.pop_back();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tid<sp/>&lt;<sp/>g_dbStopTriggers.size())<sp/>&amp;&amp;<sp/>(apiSeqNum<sp/>&gt;=<sp/>g_dbStopTriggers[tid].nextTrigger()))<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;info:<sp/>stop<sp/>profiling<sp/>at<sp/>%lu\n&quot;</highlight><highlight class="normal">,<sp/>apiSeqNum);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STOP_PROFILING;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_dbStopTriggers.pop_back();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>fullStr-&gt;reserve(16<sp/>+<sp/>apiStr.length());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>*fullStr<sp/>=<sp/>std::to_string(tid)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>*fullStr<sp/>+=<sp/>std::to_string(apiSeqNum);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>*fullStr<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>*fullStr<sp/>+=<sp/>apiStr;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(COMPILE_HIP_DB<sp/>&amp;&amp;<sp/>HIP_TRACE_API)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s&lt;&lt;hip-api<sp/>tid:%s%s\n&quot;</highlight><highlight class="normal"><sp/>,<sp/>API_COLOR,<sp/>fullStr-&gt;c_str(),<sp/>API_COLOR_END);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ihipIsValidDevice(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>deviceIndex)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deviceIndex<sp/>is<sp/>unsigned<sp/>so<sp/>always<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(deviceIndex<sp/>&lt;<sp/>g_deviceCnt);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref><sp/>*<sp/>ihipGetDevice(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceIndex)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ihipIsValidDevice(deviceIndex))<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_deviceArray[deviceIndex];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*<sp/>ihipGetPrimaryCtx(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>deviceIndex)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref><sp/>*device<sp/>=<sp/>ihipGetDevice(deviceIndex);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device<sp/>?<sp/>device-&gt;getPrimaryCtx()<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">};</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>thread_local<sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*tls_defaultCtx<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipSetTlsDefaultCtx(<ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>tls_defaultCtx<sp/>=<sp/>ctx;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>-<sp/>review<sp/>the<sp/>context<sp/>creation<sp/>strategy<sp/>here.<sp/><sp/>Really<sp/>should<sp/>be:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>-<sp/>first<sp/>&quot;non-device&quot;<sp/>runtime<sp/>call<sp/>creates<sp/>the<sp/>context<sp/>for<sp/>this<sp/>thread.<sp/><sp/>Allowed<sp/>to<sp/>call<sp/>setDevice<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>-<sp/>hipDeviceReset<sp/>destroys<sp/>the<sp/>primary<sp/>context<sp/>for<sp/>device?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>-<sp/>Then<sp/>context<sp/>is<sp/>created<sp/>again<sp/>for<sp/>next<sp/>usage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*ihipGetTlsDefaultCtx()</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Per-thread<sp/>initialization<sp/>of<sp/>the<sp/>TLS:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tls_defaultCtx<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(g_deviceCnt&gt;0))<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ihipSetTlsDefaultCtx(ihipGetPrimaryCtx(0));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tls_defaultCtx;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref><sp/>ihipSynchronize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>ihipGetTlsDefaultCtx()-&gt;locked_waitAllStreams();<sp/></highlight><highlight class="comment">//<sp/>ignores<sp/>non-blocking<sp/>streams,<sp/>this<sp/>waits<sp/>for<sp/>all<sp/>activity<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aadfbdb847b149723c684ebd764556063" kindref="member">hipSuccess</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ihipStream_t:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">TidInfo::TidInfo()<sp/><sp/>:</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>_apiSeqNum(0)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>_shortTid<sp/>=<sp/>g_lastShortTid.fetch_add(1);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(COMPILE_HIP_DB<sp/>&amp;&amp;<sp/>HIP_TRACE_API)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>tid_ss;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>tid_ss_num;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tid_ss_num<sp/>&lt;&lt;<sp/>std::this_thread::get_id();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tid_ss<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::stoull(tid_ss_num.str());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_API,<sp/></highlight><highlight class="stringliteral">&quot;HIP<sp/>initialized<sp/>short_tid#%d<sp/>(maps<sp/>to<sp/>full_tid:<sp/>0x%s)\n&quot;</highlight><highlight class="normal">,<sp/>_shortTid,<sp/>tid_ss.str().c_str());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ihipStream_t:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">ihipStream_t::ihipStream_t(<ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*ctx,<sp/>hc::accelerator_view<sp/>av,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/>:</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>_id(0),<sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>set<sp/>by<sp/>add<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>_flags(flags),</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>_ctx(ctx),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>_criticalData(this,<sp/>av)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>schedBits<sp/>=<sp/>ctx-&gt;_ctxFlags<sp/>&amp;<sp/>hipDeviceScheduleMask;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(schedBits)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ga9032d35eb7383948828ee48e1e19f5fd" kindref="member">hipDeviceScheduleAuto</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_scheduleMode<sp/>=<sp/>Auto;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ga713d962bafb7758dc1ff0675e4239453" kindref="member">hipDeviceScheduleSpin</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_scheduleMode<sp/>=<sp/>Spin;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1gaaf1e2706430c06601aa12a8af2a0ba5a" kindref="member">hipDeviceScheduleYield</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_scheduleMode<sp/>=<sp/>Yield;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipDeviceScheduleBlockingSync<sp/><sp/>:<sp/>_scheduleMode<sp/>=<sp/>Yield;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:_scheduleMode<sp/>=<sp/>Auto;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="276"><highlight class="normal">};</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">ihipStream_t::~ihipStream_t()</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">hc::hcWaitMode<sp/>ihipStream_t::waitMode()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="286"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>hc::hcWaitMode<sp/>waitMode<sp/>=<sp/>hc::hcWaitModeActive;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_scheduleMode<sp/>==<sp/>Auto)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_deviceCnt<sp/>&gt;<sp/>g_numLogicalThreads)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitMode<sp/>=<sp/>hc::hcWaitModeActive;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitMode<sp/>=<sp/>hc::hcWaitModeBlocked;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_scheduleMode<sp/>==<sp/>Spin)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitMode<sp/>=<sp/>hc::hcWaitModeActive;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_scheduleMode<sp/>==<sp/>Yield)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitMode<sp/>=<sp/>hc::hcWaitModeBlocked;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0);<sp/></highlight><highlight class="comment">//<sp/>bad<sp/>wait<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_WAIT_MODE<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitMode<sp/>=<sp/>hc::hcWaitModeBlocked;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_WAIT_MODE<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitMode<sp/>=<sp/>hc::hcWaitModeActive;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>waitMode;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//Wait<sp/>for<sp/>all<sp/>kernel<sp/>and<sp/>data<sp/>copy<sp/>commands<sp/>in<sp/>this<sp/>stream<sp/>to<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>signature<sp/>should<sp/>be<sp/>used<sp/>in<sp/>routines<sp/>that<sp/>already<sp/>have<sp/>locked<sp/>the<sp/>stream<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::wait(<ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>&amp;crit)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf<sp/>(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>wait<sp/>for<sp/>queue-empty..\n&quot;</highlight><highlight class="normal">,<sp/>ToString(</highlight><highlight class="keyword">this</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>crit-&gt;_av.wait(waitMode());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>crit-&gt;_kernelCnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//Wait<sp/>for<sp/>all<sp/>kernel<sp/>and<sp/>data<sp/>copy<sp/>commands<sp/>in<sp/>this<sp/>stream<sp/>to<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::locked_wait()</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>wait(crit);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Causes<sp/>current<sp/>stream<sp/>to<sp/>wait<sp/>for<sp/>specified<sp/>event<sp/>to<sp/>complete:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>this<sp/>does<sp/>not<sp/>provide<sp/>any<sp/>kind<sp/>of<sp/>host<sp/>serialization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::locked_streamWaitEvent(<ref refid="classihipEvent__t" kindref="compound">hipEvent_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>crit-&gt;_av.create_blocking_marker(event-&gt;marker(),<sp/>hc::accelerator_scope);</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Causes<sp/>current<sp/>stream<sp/>to<sp/>wait<sp/>for<sp/>specified<sp/>event<sp/>to<sp/>complete:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>this<sp/>does<sp/>not<sp/>provide<sp/>any<sp/>kind<sp/>of<sp/>host<sp/>serialization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ihipStream_t::locked_eventIsReady(<ref refid="classihipEvent__t" kindref="compound">hipEvent_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Event<sp/>query<sp/>that<sp/>returns<sp/>&quot;Complete&quot;<sp/>may<sp/>cause<sp/>HCC<sp/>to<sp/>manipulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>internal<sp/>queue<sp/>state<sp/>so<sp/>lock<sp/>the<sp/>stream&apos;s<sp/>queue<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(event-&gt;marker().is_ready());</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::locked_eventWaitComplete(<ref refid="classihipEvent__t" kindref="compound">hipEvent_t</ref><sp/>event,<sp/>hc::hcWaitMode<sp/>waitMode)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;marker().wait(waitMode);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>marker<sp/>in<sp/>this<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Save<sp/>state<sp/>in<sp/>the<sp/>event<sp/>so<sp/>it<sp/>can<sp/>track<sp/>the<sp/>status<sp/>of<sp/>the<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::locked_recordEvent(<ref refid="classihipEvent__t" kindref="compound">hipEvent_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lock<sp/>the<sp/>stream<sp/>to<sp/>prevent<sp/>simultaneous<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scopeFlag<sp/>=<sp/>hc::accelerator_scope;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>env<sp/>var<sp/>HIP_EVENT_SYS_RELEASE<sp/>sets<sp/>the<sp/>default,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>explicit<sp/>flags<sp/>override<sp/>the<sp/>env<sp/>var<sp/>(if<sp/>specified)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;_flags<sp/>&amp;<sp/>hipEventReleaseToSystem)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeFlag<sp/>=<sp/>hc::system_scope;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;_flags<sp/>&amp;<sp/>hipEventReleaseToDevice)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeFlag<sp/>=<sp/>hc::accelerator_scope;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeFlag<sp/>=<sp/>HIP_EVENT_SYS_RELEASE<sp/>?<sp/>hc::system_scope<sp/>:<sp/>hc::accelerator_scope;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;marker(crit-&gt;_av.create_marker(scopeFlag));</highlight></codeline>
<codeline lineno="382"><highlight class="normal">};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref><sp/>*<sp/>ihipStream_t::getDevice()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="393"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_ctx-&gt;getDevice();</highlight></codeline>
<codeline lineno="395"><highlight class="normal">};</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*<sp/>ihipStream_t::getCtx()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="400"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_ctx;</highlight></codeline>
<codeline lineno="402"><highlight class="normal">};</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Lock<sp/>the<sp/>stream<sp/>to<sp/>prevent<sp/>other<sp/>threads<sp/>from<sp/>intervening.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>ihipStream_t::lockopen_preKernelCommand()</highlight></codeline>
<codeline lineno="410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit(_criticalData,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="comment">/*no<sp/>unlock<sp/>at<sp/>destruction*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>crit;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>called<sp/>after<sp/>kernel<sp/>finishes,<sp/>this<sp/>releases<sp/>the<sp/>lock<sp/>on<sp/>the<sp/>stream<sp/>so<sp/>other<sp/>commands<sp/>can<sp/>submit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::lockclose_postKernelCommand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>kernelName,<sp/>hc::accelerator_view<sp/>*av)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blockThisKernel<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_hipLaunchBlockingKernels.empty())<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>kernelNameString(kernelName);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>o=g_hipLaunchBlockingKernels.begin();<sp/>o!=g_hipLaunchBlockingKernels.end();<sp/>o++)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*o<sp/>==<sp/>kernelNameString))<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf<sp/>(&quot;force<sp/>blocking<sp/>for<sp/>kernel<sp/>%s\n&quot;,<sp/>o-&gt;c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockThisKernel<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_LAUNCH_BLOCKING<sp/>||<sp/>blockThisKernel)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>fix<sp/>this<sp/>so<sp/>it<sp/>goes<sp/>through<sp/>proper<sp/>stream::wait()<sp/>call.//<sp/>direct<sp/>wait<sp/>OK<sp/>since<sp/>we<sp/>know<sp/>the<sp/>stream<sp/>is<sp/>locked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>av-&gt;wait(hc::hcWaitModeActive);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>LAUNCH_BLOCKING<sp/>for<sp/>kernel<sp/>&apos;%s&apos;<sp/>completion\n&quot;</highlight><highlight class="normal">,<sp/>ToString(</highlight><highlight class="keyword">this</highlight><highlight class="normal">).c_str(),<sp/>kernelName);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>_criticalData.unlock();<sp/></highlight><highlight class="comment">//<sp/>paired<sp/>with<sp/>lock<sp/>from<sp/>lockopen_preKernelCommand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">};</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Recompute<sp/>the<sp/>peercnt<sp/>and<sp/>the<sp/>packed<sp/>_peerAgents<sp/>whenever<sp/>a<sp/>peer<sp/>is<sp/>added<sp/>or<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>packed<sp/>_peerAgents<sp/>can<sp/>efficiently<sp/>be<sp/>used<sp/>on<sp/>each<sp/>memory<sp/>allocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classihipCtxCriticalBase__t" kindref="compound">ihipCtxCriticalBase_t&lt;CtxMutex&gt;::recomputePeerAgents</ref>()</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>_peerCnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each<sp/>(_peers.begin(),<sp/>_peers.end(),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref>*<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_peerAgents[_peerCnt++]<sp/>=<sp/>ctx-&gt;getDevice()-&gt;_hsaAgent;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classihipCtxCriticalBase__t" kindref="compound">ihipCtxCriticalBase_t&lt;CtxMutex&gt;::isPeerWatcher</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*peer)</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>std::find(_peers.begin(),<sp/>_peers.end(),<sp/>peer);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(match<sp/>!=<sp/>std::end(_peers));</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classihipCtxCriticalBase__t" kindref="compound">ihipCtxCriticalBase_t&lt;CtxMutex&gt;::addPeerWatcher</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*thisCtx,<sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*peerWatcher)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>std::find(_peers.begin(),<sp/>_peers.end(),<sp/>peerWatcher);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match<sp/>==<sp/>std::end(_peers))<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>already<sp/>a<sp/>peer,<sp/>let&apos;s<sp/>update<sp/>the<sp/>list:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;addPeerWatcher.<sp/><sp/>Allocations<sp/>on<sp/>%s<sp/>now<sp/>visible<sp/>to<sp/>peerWatcher<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisCtx-&gt;toString().c_str(),<sp/>peerWatcher-&gt;toString().c_str());</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_peers.push_back(peerWatcher);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recomputePeerAgents();</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>here<sp/>-<sp/>peer<sp/>was<sp/>already<sp/>on<sp/>list,<sp/>silently<sp/>ignore.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classihipCtxCriticalBase__t" kindref="compound">ihipCtxCriticalBase_t&lt;CtxMutex&gt;::removePeerWatcher</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*thisCtx,<sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*peerWatcher)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>std::find(_peers.begin(),<sp/>_peers.end(),<sp/>peerWatcher);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match<sp/>!=<sp/>std::end(_peers))<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>a<sp/>valid<sp/>peer,<sp/>let&apos;s<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;removePeerWatcher.<sp/><sp/>Allocations<sp/>on<sp/>%s<sp/>no<sp/>longer<sp/>visible<sp/>to<sp/>former<sp/>peerWatcher<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisCtx-&gt;toString().c_str(),<sp/>peerWatcher-&gt;toString().c_str());</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_peers.remove(peerWatcher);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recomputePeerAgents();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classihipCtxCriticalBase__t" kindref="compound">ihipCtxCriticalBase_t&lt;CtxMutex&gt;::resetPeerWatchers</ref>(<ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*thisCtx)</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;resetPeerWatchers<sp/>for<sp/>context=%s\n&quot;</highlight><highlight class="normal">,<sp/>thisCtx-&gt;toString().c_str());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>_peers.clear();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>_peerCnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>addPeerWatcher(thisCtx,<sp/>thisCtx);<sp/></highlight><highlight class="comment">//<sp/>peer-list<sp/>always<sp/>contains<sp/>self<sp/>agent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classihipCtxCriticalBase__t" kindref="compound">ihipCtxCriticalBase_t&lt;CtxMutex&gt;::printPeerWatchers</ref>(FILE<sp/>*f)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="514"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>_peers.begin();<sp/>iter!=_peers.end();<sp/>iter++)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(f,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>(*iter)-&gt;toString().c_str());</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classihipCtxCriticalBase__t" kindref="compound">ihipCtxCriticalBase_t&lt;CtxMutex&gt;::addStream</ref>(<ref refid="classihipStream__t" kindref="compound">ihipStream_t</ref><sp/>*stream)</highlight></codeline>
<codeline lineno="526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;_id<sp/>=<sp/>_streams.size();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>_streams.push_back(stream);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>addStream:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>ToString(stream).c_str());</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classihipDeviceCriticalBase__t" kindref="compound">ihipDeviceCriticalBase_t&lt;DeviceMutex&gt;::addContext</ref>(<ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>_ctxs.push_back(ctx);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>addContext:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>ToString(ctx).c_str());</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ihipDevice_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">ihipDevice_t::ihipDevice_t(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>deviceId,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>deviceCnt,<sp/>hc::accelerator<sp/>&amp;acc)<sp/>:</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>_deviceId(deviceId),</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>_acc(acc),</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>_state(0),</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>_criticalData(this)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_agent_t<sp/>*agent<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">hsa_agent_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(acc.get_hsa_agent());</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>hsa_agent_get_info(*agent,<sp/>(hsa_agent_info_t)HSA_AMD_AGENT_INFO_COMPUTE_UNIT_COUNT,<sp/>&amp;_computeUnits);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>HSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_computeUnits<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_hsaAgent<sp/>=<sp/>*agent;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_hsaAgent.handle<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>initProperties(&amp;_props);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>_primaryCtx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>deviceCnt,<sp/>hipDeviceMapHost);</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">ihipDevice_t::~ihipDevice_t()</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>_primaryCtx;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>_primaryCtx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipDevice_t::locked_removeContext(<ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*c)</highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_DeviceCrit_t</ref><sp/><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>crit-&gt;ctxs().remove(c);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>locked_removeContext:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>ToString(c).c_str());</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipDevice_t::locked_reset()</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Obtain<sp/>mutex<sp/>access<sp/>to<sp/>the<sp/>device<sp/>critical<sp/>data,<sp/>release<sp/>by<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_DeviceCrit_t</ref><sp/><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Wait<sp/>for<sp/>pending<sp/>activity<sp/>to<sp/>complete?<sp/><sp/>TODO<sp/>-<sp/>check<sp/>if<sp/>this<sp/>is<sp/>required<sp/>behavior:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;locked_reset<sp/>waiting<sp/>for<sp/>activity<sp/>to<sp/>complete.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>and<sp/>remove<sp/>streams:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>all<sp/>created<sp/>streams<sp/>including<sp/>the<sp/>default<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctxI=crit-&gt;const_ctxs().begin();<sp/>ctxI!=crit-&gt;const_ctxs().end();<sp/>ctxI++)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*ctx<sp/>=<sp/>*ctxI;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*ctxI)-&gt;locked_reset();</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ctx<sp/>cleanup<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>ToString(ctx).c_str());</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ctx;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>crit-&gt;ctxs().clear();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//reset<sp/>_primaryCtx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>_primaryCtx-&gt;locked_reset();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>_primaryCtx<sp/>cleanup<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>ToString(_primaryCtx).c_str());</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>and<sp/>release<sp/>all<sp/>memory<sp/>stored<sp/>in<sp/>the<sp/>tracker:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>will<sp/>remove<sp/>peer<sp/>mapping<sp/>so<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>this<sp/>explicitly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>-<sp/>This<sp/>is<sp/>clearly<sp/>a<sp/>non-const<sp/>action!<sp/><sp/>Is<sp/>this<sp/>a<sp/>context<sp/>reset<sp/>or<sp/>a<sp/>device<sp/>reset<sp/>-<sp/>maybe<sp/>should<sp/>reference<sp/>count?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>_state<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>am_memtracker_reset(_acc);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal">};</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ErrorCheck(x)<sp/>error_check(x,<sp/>__LINE__,<sp/>__FILE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>error_check(hsa_status_t<sp/>hsa_error_code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_num,<sp/>std::string<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hsa_error_code<sp/>!=<sp/>HSA_STATUS_SUCCESS)&amp;&amp;<sp/>(hsa_error_code<sp/>!=<sp/>HSA_STATUS_INFO_BREAK))<sp/><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;HSA<sp/>reported<sp/>error!\n<sp/>In<sp/>file:<sp/>%s\nAt<sp/>line:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>str.c_str(),line_num);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>for<sp/>initProperties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>if<sp/>the<sp/>given<sp/>agent<sp/>is<sp/>of<sp/>type<sp/>HSA_DEVICE_TYPE_GPU<sp/>and<sp/>counts<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>hsa_status_t<sp/>countGpuAgents(hsa_agent_t<sp/>agent,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HSA_STATUS_ERROR_INVALID_ARGUMENT;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_device_type_t<sp/>device_type;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_status_t<sp/>status<sp/>=<sp/>hsa_agent_get_info(agent,<sp/>HSA_AGENT_INFO_DEVICE,<sp/>&amp;device_type);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>HSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_type<sp/>==<sp/>HSA_DEVICE_TYPE_GPU)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data))++;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HSA_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal">hsa_status_t<sp/>FindGpuDevice(hsa_agent_t<sp/>agent,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HSA_STATUS_ERROR_INVALID_ARGUMENT;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_device_type_t<sp/>hsa_device_type;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_status_t<sp/>hsa_error_code<sp/>=</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_agent_get_info(agent,<sp/>HSA_AGENT_INFO_DEVICE,<sp/>&amp;hsa_device_type);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hsa_error_code<sp/>!=<sp/>HSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hsa_error_code;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hsa_device_type<sp/>==<sp/>HSA_DEVICE_TYPE_GPU)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((hsa_agent_t*)data)<sp/>=<sp/>agent;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HSA_STATUS_INFO_BREAK;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HSA_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal">hsa_status_t<sp/>GetDevicePool(hsa_amd_memory_pool_t<sp/>pool,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HSA_STATUS_ERROR_INVALID_ARGUMENT;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_status_t<sp/>err;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_amd_segment_t<sp/>segment;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>flag;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_amd_memory_pool_get_info(pool,<sp/>HSA_AMD_MEMORY_POOL_INFO_SEGMENT,<sp/>&amp;segment);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>ErrorCheck(err);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HSA_AMD_SEGMENT_GLOBAL<sp/>!=<sp/>segment)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HSA_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_amd_memory_pool_get_info(pool,<sp/>HSA_AMD_MEMORY_POOL_INFO_GLOBAL_FLAGS,<sp/>&amp;flag);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>ErrorCheck(err);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>*((hsa_amd_memory_pool_t*)data)<sp/>=<sp/>pool;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HSA_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>checkAccess(hsa_agent_t<sp/>agent,<sp/>hsa_amd_memory_pool_t<sp/>pool)</highlight></codeline>
<codeline lineno="690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_status_t<sp/>err;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_amd_memory_pool_access_t<sp/>access;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_amd_agent_memory_pool_get_info(agent,<sp/>pool,<sp/>HSA_AMD_AGENT_MEMORY_POOL_INFO_ACCESS,<sp/>&amp;access);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>ErrorCheck(err);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>access;</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal">hsa_status_t<sp/>get_region_info(hsa_region_t<sp/>region,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline lineno="699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_status_t<sp/>err;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhipDeviceProp__t" kindref="compound">hipDeviceProp_t</ref>*<sp/>p_prop<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structhipDeviceProp__t" kindref="compound">hipDeviceProp_t</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>region_segment;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>region<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_region_get_info(region,<sp/>HSA_REGION_INFO_SEGMENT,<sp/>&amp;region_segment);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>ErrorCheck(err);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(region_segment)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>HSA_REGION_SEGMENT_READONLY:</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_region_get_info(region,<sp/>HSA_REGION_INFO_SIZE,<sp/>&amp;(p_prop-&gt;<ref refid="structhipDeviceProp__t_1a29880232c56120be3455ce00d5379665" kindref="member">totalConstMem</ref>));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>case<sp/>HSA_REGION_SEGMENT_PRIVATE:</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;&quot;PRIVATE&quot;&lt;&lt;endl;<sp/>private<sp/>segment<sp/>cannot<sp/>be<sp/>queried<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>HSA_REGION_SEGMENT_GROUP:</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_region_get_info(region,<sp/>HSA_REGION_INFO_SIZE,<sp/>&amp;(p_prop-&gt;<ref refid="structhipDeviceProp__t_1a3b9138678a0795c2677eddcfb1c67156" kindref="member">sharedMemPerBlock</ref>));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HSA_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>if<sp/>the<sp/>given<sp/>agent<sp/>is<sp/>of<sp/>type<sp/>HSA_DEVICE_TYPE_GPU<sp/>and<sp/>counts<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>hsa_status_t<sp/>findCpuAgent(hsa_agent_t<sp/>agent,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_device_type_t<sp/>device_type;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_status_t<sp/>status<sp/>=<sp/>hsa_agent_get_info(agent,<sp/>HSA_AGENT_INFO_DEVICE,<sp/>&amp;device_type);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>HSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_type<sp/>==<sp/>HSA_DEVICE_TYPE_CPU)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">hsa_agent_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data))<sp/>=<sp/>agent;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HSA_STATUS_INFO_BREAK;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HSA_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DeviceErrorCheck(x)<sp/>if<sp/>(x<sp/>!=<sp/>HSA_STATUS_SUCCESS)<sp/>{<sp/>return<sp/>hipErrorInvalidDevice;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialize<sp/>properties<sp/>for<sp/>the<sp/>device.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>this<sp/>once<sp/>when<sp/>the<sp/>ihipDevice_t<sp/>is<sp/>created:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref><sp/>ihipDevice_t::initProperties(<ref refid="structhipDeviceProp__t" kindref="compound">hipDeviceProp_t</ref>*<sp/>prop)</highlight></codeline>
<codeline lineno="744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref><sp/>e<sp/>=<sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aadfbdb847b149723c684ebd764556063" kindref="member">hipSuccess</ref>;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_status_t<sp/>err;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>some<sp/>defaults<sp/>in<sp/>case<sp/>we<sp/>don&apos;t<sp/>find<sp/>the<sp/>appropriate<sp/>regions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1acedd6a2d23423441e4bf51c4a1b719f9" kindref="member">totalGlobalMem</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1a29880232c56120be3455ce00d5379665" kindref="member">totalConstMem</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<sp/>maxThreadsPerMultiProcessor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1a73c1c21648a901799ff6bef83c11135b" kindref="member">regsPerBlock</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_hsaAgent.handle<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a07ab9b704ea693c1781a52741c60cd0d" kindref="member">hipErrorInvalidDevice</ref>;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterates<sp/>over<sp/>the<sp/>agents<sp/>to<sp/>determine<sp/>Multiple<sp/>GPU<sp/>devices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>countGpuAgents<sp/>callback.</highlight></codeline>
<codeline lineno="761"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpuAgentsCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_iterate_agents(countGpuAgents,<sp/>&amp;gpuAgentsCount);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>HSA_STATUS_INFO_BREAK)<sp/>{<sp/>err<sp/>=<sp/>HSA_STATUS_SUCCESS;<sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1a9bb19b2b0cdee8977ed63964532d639d" kindref="member">isMultiGpuBoard</ref><sp/>=<sp/>0<sp/>?<sp/>gpuAgentsCount<sp/>&lt;<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>agent<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,<sp/>(hsa_agent_info_t)HSA_AMD_AGENT_INFO_PRODUCT_NAME,<sp/>&amp;(prop-&gt;<ref refid="structhipDeviceProp__t_1a5b44bf8fa46faefcde989942b1d11a5e" kindref="member">name</ref>));</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>archName[256];</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,<sp/>HSA_AGENT_INFO_NAME,<sp/>&amp;archName);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1adc5950a3d5bbe00cf59d413d8aeeee18" kindref="member">gcnArch</ref><sp/>=<sp/>atoi(archName+3);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>agent<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>node;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,<sp/>HSA_AGENT_INFO_NODE,<sp/>&amp;node);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>wavefront<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,<sp/>HSA_AGENT_INFO_WAVEFRONT_SIZE,&amp;prop-&gt;<ref refid="structhipDeviceProp__t_1af3357d33c004608bf05bc21a352be81b" kindref="member">warpSize</ref>);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>max<sp/>total<sp/>number<sp/>of<sp/>work-items<sp/>in<sp/>a<sp/>workgroup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,<sp/>HSA_AGENT_INFO_WORKGROUP_MAX_SIZE,<sp/>&amp;prop-&gt;<ref refid="structhipDeviceProp__t_1af971cf1ca3ec1f68ad09036c0cc672e0" kindref="member">maxThreadsPerBlock</ref><sp/>);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>max<sp/>number<sp/>of<sp/>work-items<sp/>of<sp/>each<sp/>dimension<sp/>of<sp/>a<sp/>work-group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>work_group_max_dim[3];</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,<sp/>HSA_AGENT_INFO_WORKGROUP_MAX_DIM,<sp/>work_group_max_dim);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=0;<sp/>i&lt;<sp/>3<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1a8ebba6fc12f80c9a9cf9b9193f0da465" kindref="member">maxThreadsDim</ref>[i]=<sp/>work_group_max_dim[i];</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_dim3_t<sp/>grid_max_dim;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,<sp/>HSA_AGENT_INFO_GRID_MAX_DIM,<sp/>&amp;grid_max_dim);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1ae529c23929f592120081fed31d877a55" kindref="member">maxGridSize</ref>[0]=<sp/>(int)<sp/>((grid_max_dim.x<sp/>==<sp/>UINT32_MAX)<sp/>?<sp/>(INT32_MAX)<sp/>:<sp/>grid_max_dim.x);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1ae529c23929f592120081fed31d877a55" kindref="member">maxGridSize</ref>[1]=<sp/>(int)<sp/>((grid_max_dim.y<sp/>==<sp/>UINT32_MAX)<sp/>?<sp/>(INT32_MAX)<sp/>:<sp/>grid_max_dim.y);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1ae529c23929f592120081fed31d877a55" kindref="member">maxGridSize</ref>[2]=<sp/>(int)<sp/>((grid_max_dim.z<sp/>==<sp/>UINT32_MAX)<sp/>?<sp/>(INT32_MAX)<sp/>:<sp/>grid_max_dim.z);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Max<sp/>clock<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,<sp/>(hsa_agent_info_t)HSA_AMD_AGENT_INFO_MAX_CLOCK_FREQUENCY,<sp/>&amp;prop-&gt;<ref refid="structhipDeviceProp__t_1a1dd15bee43692b8649dfbdc1adbaaf96" kindref="member">clockRate</ref>);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1a1dd15bee43692b8649dfbdc1adbaaf96" kindref="member">clockRate</ref><sp/>*=<sp/>1000.0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>Mhz<sp/>to<sp/>Khz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counterHz;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_system_get_info(HSA_SYSTEM_INFO_TIMESTAMP_FREQUENCY,<sp/>&amp;counterHz);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1a6fbf3b08a1a08ae700f1a06265f6666b" kindref="member">clockInstructionRate</ref><sp/>=<sp/>counterHz<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Agent<sp/>BDFID<sp/>(bus/device/function<sp/>ID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>bdf_id<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,<sp/>(hsa_agent_info_t)HSA_AMD_AGENT_INFO_BDFID,<sp/>&amp;bdf_id);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BDFID<sp/>is<sp/>16bit<sp/>uint:<sp/>[8bit<sp/>-<sp/>BusID<sp/>|<sp/>5bit<sp/>-<sp/>Device<sp/>ID<sp/>|<sp/>3bit<sp/>-<sp/>Function/DomainID]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1aa0f598c0196ff1f429290a43c1fa4038" kindref="member">pciDomainID</ref><sp/>=<sp/><sp/>bdf_id<sp/>&amp;<sp/>0x7;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1ae6aa845dc2d540f85098ea30be35f4eb" kindref="member">pciDeviceID</ref><sp/>=<sp/><sp/>(bdf_id&gt;&gt;3)<sp/>&amp;<sp/>0x1F;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1a1350f64d49b717ed3a06458f7549ccb0" kindref="member">pciBusID</ref><sp/>=<sp/><sp/>(bdf_id&gt;&gt;8)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Masquerade<sp/>as<sp/>a<sp/>3.0-level<sp/>device.<sp/>This<sp/>will<sp/>change<sp/>as<sp/>more<sp/>HW<sp/>functions<sp/>are<sp/>properly<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Application<sp/>code<sp/>should<sp/>use<sp/>the<sp/>arch.has*<sp/>to<sp/>do<sp/>detailed<sp/>feature<sp/>detection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1aec9e4173c2e34cc232300c415dbd5e4f" kindref="member">major</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1abb51208e2509a7a1d107f0da69108938" kindref="member">minor</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>number<sp/>of<sp/>Compute<sp/>Unit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,<sp/>(hsa_agent_info_t)HSA_AMD_AGENT_INFO_COMPUTE_UNIT_COUNT,<sp/>&amp;(prop-&gt;<ref refid="structhipDeviceProp__t_1add8d9d2ad52aece9fd1dbe25c18d9d57" kindref="member">multiProcessorCount</ref>));</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO-hsart<sp/>-<sp/>this<sp/>appears<sp/>to<sp/>return<sp/>0?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cache_size[4];</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,<sp/>HSA_AGENT_INFO_CACHE_SIZE,<sp/>cache_size);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1a24404decccc16833973c803ced6f3a51" kindref="member">l2CacheSize</ref><sp/>=<sp/>cache_size[1];</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Computemode<sp/>for<sp/>HSA<sp/>Devices<sp/>is<sp/>always<sp/>:<sp/>cudaComputeModeDefault<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1ae7d9216f8583a703359d0b9373823f5d" kindref="member">computeMode</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>_isLargeBar<sp/>=<sp/>_acc.has_cpu_accessible_am();</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Max<sp/>Threads<sp/>Per<sp/>Multiprocessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>max_waves_per_cu;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_get_info(_hsaAgent,(hsa_agent_info_t)<sp/>HSA_AMD_AGENT_INFO_MAX_WAVES_PER_CU,<sp/>&amp;max_waves_per_cu);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<sp/>maxThreadsPerMultiProcessor<sp/>=<sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1af3357d33c004608bf05bc21a352be81b" kindref="member">warpSize</ref>*max_waves_per_cu;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>memory<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_agent_iterate_regions(_hsaAgent,<sp/>get_region_info,<sp/>prop);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>size<sp/>of<sp/>the<sp/>region<sp/>we<sp/>are<sp/>using<sp/>for<sp/>Accelerator<sp/>Memory<sp/>allocations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_region_t<sp/>*am_region<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">hsa_region_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_acc.get_hsa_am_region());</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_region_get_info(*am_region,<sp/>HSA_REGION_INFO_SIZE,<sp/>&amp;prop-&gt;<ref refid="structhipDeviceProp__t_1acedd6a2d23423441e4bf51c4a1b719f9" kindref="member">totalGlobalMem</ref>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>maxSharedMemoryPerMultiProcessor<sp/>should<sp/>be<sp/>as<sp/>the<sp/>same<sp/>as<sp/>group<sp/>memory<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Group<sp/>memory<sp/>will<sp/>not<sp/>be<sp/>paged<sp/>out,<sp/>so,<sp/>the<sp/>physical<sp/>memory<sp/>size<sp/>is<sp/>the<sp/>total<sp/>shared<sp/>memory<sp/>size,<sp/>and<sp/>also<sp/>equal<sp/>to<sp/>the<sp/>group<sp/>region<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1aa1a32a7f387f6da845db7b228711fce8" kindref="member">maxSharedMemoryPerMultiProcessor</ref><sp/>=<sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1acedd6a2d23423441e4bf51c4a1b719f9" kindref="member">totalGlobalMem</ref>;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Max<sp/>memory<sp/>clock<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_region_get_info(*am_region,<sp/>(hsa_region_info_t)HSA_AMD_REGION_INFO_MAX_CLOCK_FREQUENCY,<sp/>&amp;prop-&gt;<ref refid="structhipDeviceProp__t_1a6db0ab8e7e8cc13c84d7bb7f70226d5e" kindref="member">memoryClockRate</ref>);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1a6db0ab8e7e8cc13c84d7bb7f70226d5e" kindref="member">memoryClockRate</ref><sp/>*=<sp/>1000.0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>Mhz<sp/>to<sp/>Khz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>global<sp/>memory<sp/>bus<sp/>width<sp/>in<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>hsa_region_get_info(*am_region,<sp/>(hsa_region_info_t)HSA_AMD_REGION_INFO_BUS_WIDTH,<sp/>&amp;prop-&gt;<ref refid="structhipDeviceProp__t_1a1d710ce8bd34daf66f892a66a2273132" kindref="member">memoryBusWidth</ref>);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceErrorCheck(err);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>feature<sp/>flags<sp/>-<sp/>these<sp/>are<sp/>all<sp/>mandatory<sp/>for<sp/>HIP<sp/>on<sp/>HCC<sp/>path:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>features<sp/>are<sp/>under-development<sp/>and<sp/>future<sp/>revs<sp/>may<sp/>support<sp/>flags<sp/>that<sp/>are<sp/>currently<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reporting<sp/>of<sp/>these<sp/>flags<sp/>should<sp/>be<sp/>synchronized<sp/>with<sp/>the<sp/>HIP_ARCH*<sp/>compile-time<sp/>defines<sp/>in<sp/>hip_runtime.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1a8d00c3ab98869b602c714fe7abe68e93" kindref="member">hasGlobalInt32Atomics</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1a8f213ae9a4729dff1c636ac5de0e2fa2" kindref="member">hasGlobalFloatAtomicExch</ref><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1a1596330b1cb9cc73f142aee11b2ab853" kindref="member">hasSharedInt32Atomics</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1aff005558b4edabd27b27f286ac5b2f2b" kindref="member">hasSharedFloatAtomicExch</ref><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1a2321d6ef74aac91c044f3289d25b2d41" kindref="member">hasFloatAtomicAdd</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1ad5aa54dbab22dbcd8cf98f57a96c6636" kindref="member">hasGlobalInt64Atomics</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1a00c2b930fcdcad9ea7b54b449db13966" kindref="member">hasSharedInt64Atomics</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1a2d624e3d85e615b71d1182f8912893b4" kindref="member">hasDoubles</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1a35bde017352eca1d4e0eceb3bf79f274" kindref="member">hasWarpVote</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1af1e934a8a5106995bcc256287585564c" kindref="member">hasWarpBallot</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1a3d922e8fc97ca1e8ecc39600b138fa2d" kindref="member">hasWarpShuffle</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1aaec4f2d983d4602858fae8e9ddeee3ff" kindref="member">hasFunnelShift</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>TODO-hcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1ac2818e3b91cba8beb36741e9867bb887" kindref="member">hasThreadFenceSystem</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>TODO-hcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1ade6a3b21ad5f344dcd92c52102c274ba" kindref="member">hasSyncThreadsExt</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>TODO-hcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1a9eb2462148686d4c048b69b6e09f835e" kindref="member">hasSurfaceFuncs</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>TODO-hcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1aa5e22d295cce0d9a34ee6e7e7e378c26" kindref="member">has3dGrid</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1afc58158e44bef6ad26f2be401434b049" kindref="member">arch</ref>.<ref refid="structhipDeviceArch__t_1a9114bfc718bf0648b54ff9a319a36b35" kindref="member">hasDynamicParallelism</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1ad8461a28caf9c38c58cf358583b5bee3" kindref="member">concurrentKernels</ref><sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>All<sp/>ROCm<sp/>hardware<sp/>supports<sp/>executing<sp/>multiple<sp/>kernels<sp/>concurrently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1ac2143f5448607d1a02a9e8783fcf06a1" kindref="member">canMapHostMemory</ref><sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>ROCm<sp/>devices<sp/>can<sp/>map<sp/>host<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1a29880232c56120be3455ce00d5379665" kindref="member">totalConstMem</ref><sp/>=<sp/>16384;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>code<sp/>broken<sp/>below<sp/>since<sp/>it<sp/>always<sp/>returns<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>the<sp/>flags<sp/>part<sp/>of<sp/>the<sp/>context<sp/>or<sp/>part<sp/>of<sp/>the<sp/>device?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>_device_flags<sp/>|<sp/>hipDeviceMapHost)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1ac2143f5448607d1a02a9e8783fcf06a1" kindref="member">canMapHostMemory</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop-&gt;<ref refid="structhipDeviceProp__t_1ac2143f5448607d1a02a9e8783fcf06a1" kindref="member">canMapHostMemory</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ihipCtx_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal">ihipCtx_t::ihipCtx_t(<ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref><sp/>*device,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>deviceCnt,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flags)<sp/>:</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>_ctxFlags(flags),</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>_device(device),</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>_criticalData(this,<sp/>deviceCnt)</highlight></codeline>
<codeline lineno="918"><highlight class="normal">{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//locked_reset();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_CtxCrit_t</ref><sp/><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>_defaultStream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classihipStream__t" kindref="compound">ihipStream_t</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>getDevice()-&gt;_acc.get_default_view(),<sp/><ref refid="group__GlobalDefs_1ga6df5f70eb976836ab3598cacf0ffcdf9" kindref="member">hipStreamDefault</ref>);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>crit-&gt;addStream(_defaultStream);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>peer<sp/>list<sp/>to<sp/>just<sp/>me:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>crit-&gt;resetPeerWatchers(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;created<sp/>ctx<sp/>with<sp/>defaultStream=%p<sp/>(%s)\n&quot;</highlight><highlight class="normal">,<sp/>_defaultStream,<sp/>ToString(_defaultStream).c_str());</highlight></codeline>
<codeline lineno="928"><highlight class="normal">};</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal">ihipCtx_t::~ihipCtx_t()</highlight></codeline>
<codeline lineno="934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_defaultStream)<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>_defaultStream;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_defaultStream<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//Reset<sp/>the<sp/>device<sp/>-<sp/>this<sp/>is<sp/>called<sp/>from<sp/>hipDeviceReset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">//Device<sp/>may<sp/>be<sp/>reset<sp/>multiple<sp/>times,<sp/>and<sp/>may<sp/>be<sp/>reset<sp/>after<sp/>init.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipCtx_t::locked_reset()</highlight></codeline>
<codeline lineno="943"><highlight class="normal">{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Obtain<sp/>mutex<sp/>access<sp/>to<sp/>the<sp/>device<sp/>critical<sp/>data,<sp/>release<sp/>by<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_CtxCrit_t</ref><sp/><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Wait<sp/>for<sp/>pending<sp/>activity<sp/>to<sp/>complete?<sp/><sp/>TODO<sp/>-<sp/>check<sp/>if<sp/>this<sp/>is<sp/>required<sp/>behavior:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;locked_reset<sp/>waiting<sp/>for<sp/>activity<sp/>to<sp/>complete.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>and<sp/>remove<sp/>streams:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>all<sp/>created<sp/>streams<sp/>including<sp/>the<sp/>default<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>streamI=crit-&gt;const_streams().begin();<sp/>streamI!=crit-&gt;const_streams().end();<sp/>streamI++)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classihipStream__t" kindref="compound">ihipStream_t</ref><sp/>*stream<sp/>=<sp/>*streamI;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*streamI)-&gt;locked_wait();</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>delete<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>ToString(stream).c_str());</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>crit-&gt;streams().clear();</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>fresh<sp/>default<sp/>stream<sp/>and<sp/>add<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>_defaultStream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classihipStream__t" kindref="compound">ihipStream_t</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>getDevice()-&gt;_acc.get_default_view(),<sp/><ref refid="group__GlobalDefs_1ga6df5f70eb976836ab3598cacf0ffcdf9" kindref="member">hipStreamDefault</ref>);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>crit-&gt;addStream(_defaultStream);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>peer<sp/>list<sp/>to<sp/>just<sp/>me:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>crit-&gt;resetPeerWatchers(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>and<sp/>release<sp/>all<sp/>memory<sp/>stored<sp/>in<sp/>the<sp/>tracker:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>will<sp/>remove<sp/>peer<sp/>mapping<sp/>so<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>this<sp/>explicitly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>-<sp/>This<sp/>is<sp/>clearly<sp/>a<sp/>non-const<sp/>action!<sp/><sp/>Is<sp/>this<sp/>a<sp/>context<sp/>reset<sp/>or<sp/>a<sp/>device<sp/>reset<sp/>-<sp/>maybe<sp/>should<sp/>reference<sp/>count?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref><sp/>*device<sp/>=<sp/>getWriteableDevice();</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>device-&gt;_state<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>am_memtracker_reset(device-&gt;_acc);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal">};</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal">std::string<sp/>ihipCtx_t::toString()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="985"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="989"><highlight class="normal">};</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>functions,<sp/>these<sp/>are<sp/>not<sp/>part<sp/>of<sp/>the<sp/>public<sp/>HIP<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>This<sp/>called<sp/>for<sp/>submissions<sp/>that<sp/>are<sp/>sent<sp/>to<sp/>the<sp/>null/default<sp/>stream.<sp/><sp/>This<sp/>routine<sp/>ensures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>that<sp/>this<sp/>new<sp/>command<sp/>waits<sp/>for<sp/>activity<sp/>in<sp/>the<sp/>other<sp/>streams<sp/>to<sp/>complete<sp/>before<sp/>proceeding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>HIP_SYNC_NULL_STREAM=0<sp/>does<sp/>all<sp/>dependency<sp/>resolutiokn<sp/>on<sp/>the<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>HIP_SYNC_NULL_STREAM=1<sp/>s<sp/>legacy<sp/>non-optimal<sp/>mode<sp/>which<sp/>conservatively<sp/>waits<sp/>on<sp/>host.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>If<sp/>waitOnSelf<sp/>is<sp/>set,<sp/>this<sp/>additionally<sp/>waits<sp/>for<sp/>the<sp/>default<sp/>stream<sp/>to<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>In<sp/>new<sp/>HIP_SYNC_NULL_STREAM=0<sp/>mode,<sp/>this<sp/>enqueues<sp/>a<sp/>marker<sp/>which<sp/>causes<sp/>the<sp/>default<sp/>stream<sp/>to<sp/>wait<sp/>for<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>activity,<sp/>but<sp/>doesn&apos;t<sp/>actually<sp/>block<sp/>the<sp/>host.<sp/><sp/>If<sp/>host<sp/>blocking<sp/>is<sp/>desired,<sp/>the<sp/>caller<sp/>should<sp/>set<sp/>syncHost.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>syncToHost<sp/>causes<sp/>host<sp/>to<sp/>wait<sp/>for<sp/>the<sp/>stream<sp/>to<sp/>finish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Note<sp/>HIP_SYNC_NULL_STREAM=1<sp/>path<sp/>always<sp/>sync<sp/>to<sp/>Host.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipCtx_t::locked_syncDefaultStream(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>waitOnSelf,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>syncHost)</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_CtxCrit_t</ref><sp/><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;syncDefaultStream<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>of<sp/>ops<sp/>sent<sp/>to<sp/>each<sp/>stream<sp/>that<sp/>will<sp/>complete<sp/>before<sp/>ops<sp/>sent<sp/>to<sp/>null<sp/>stream:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;hc::completion_future&gt;<sp/>depOps;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>streamI=crit-&gt;const_streams().begin();<sp/>streamI!=crit-&gt;const_streams().end();<sp/>streamI++)<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classihipStream__t" kindref="compound">ihipStream_t</ref><sp/>*stream<sp/>=<sp/>*streamI;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>wait<sp/>for<sp/>streams<sp/>that<sp/>have<sp/>&quot;opted-out&quot;<sp/>of<sp/>syncing<sp/>with<sp/>NULL<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>-<sp/>don&apos;t<sp/>wait<sp/>for<sp/>the<sp/>NULL<sp/>stream,<sp/>unless<sp/>waitOnSelf<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>waitThisStream<sp/>=<sp/>(!(stream-&gt;_flags<sp/>&amp;<sp/><ref refid="group__GlobalDefs_1gaaba9ae995d9b43b7d1ee70c6fa12c57d" kindref="member">hipStreamNonBlocking</ref>))<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(waitOnSelf<sp/>||<sp/>(stream<sp/>!=<sp/>_defaultStream));</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_SYNC_NULL_STREAM)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waitThisStream)<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;locked_wait();</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waitThisStream)<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>streamCrit(stream-&gt;_criticalData);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>last<sp/>marker<sp/>will<sp/>provide<sp/>appropriate<sp/>visibility:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!streamCrit-&gt;_av.get_is_empty())<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depOps.push_back(streamCrit-&gt;_av.create_marker(hc::accelerator_scope));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>push<sp/>marker<sp/>to<sp/>wait<sp/>for<sp/>stream=%s\n&quot;</highlight><highlight class="normal">,<sp/>ToString(stream).c_str());</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>skipped<sp/>stream=%s<sp/>since<sp/>it<sp/>is<sp/>empty\n&quot;</highlight><highlight class="normal">,<sp/>ToString(stream).c_str());</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enqueue<sp/>a<sp/>barrier<sp/>to<sp/>wait<sp/>on<sp/>all<sp/>the<sp/>barriers<sp/>we<sp/>sent<sp/>above:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HIP_SYNC_NULL_STREAM<sp/>&amp;&amp;<sp/>!depOps.empty())<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>defaultStreamCrit(_defaultStream-&gt;_criticalData);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>null-stream<sp/>wait<sp/>on<sp/>%zu<sp/>non-empty<sp/>streams.<sp/>sync_host=%d\n&quot;</highlight><highlight class="normal">,<sp/>depOps.size(),<sp/>syncHost);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc::completion_future<sp/>defaultCf<sp/>=<sp/>defaultStreamCrit-&gt;_av.create_blocking_marker(depOps.begin(),<sp/>depOps.end(),<sp/>hc::accelerator_scope);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(syncHost)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaultCf.wait();<sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>account<sp/>for<sp/>active<sp/>or<sp/>blocking<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>syncDefaultStream<sp/>depOps=%zu\n&quot;</highlight><highlight class="normal">,<sp/>depOps.size());</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipCtx_t::locked_removeStream(<ref refid="classihipStream__t" kindref="compound">ihipStream_t</ref><sp/>*s)</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_CtxCrit_t</ref><sp/><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>crit-&gt;streams().remove(s);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//Heavyweight<sp/>synchronization<sp/>that<sp/>waits<sp/>on<sp/>all<sp/>streams,<sp/>ignoring<sp/>hipStreamNonBlocking<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipCtx_t::locked_waitAllStreams()</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_CtxCrit_t</ref><sp/><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;waitAllStream\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>streamI=crit-&gt;const_streams().begin();<sp/>streamI!=crit-&gt;const_streams().end();<sp/>streamI++)<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*streamI)-&gt;locked_wait();</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal">std::string<sp/>HIP_DB_string(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>db)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>dbStr;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;DB_MAX_FLAG;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(db<sp/>&amp;<sp/>(1&lt;&lt;i))<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!first)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbStr<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbStr<sp/>+=<sp/>dbName[i]._color;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbStr<sp/>+=<sp/>dbName[i]._shortName;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbStr<sp/>+=<sp/>KNRM;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dbStr;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Callback<sp/>used<sp/>to<sp/>process<sp/>HIP_DB<sp/>input,<sp/>supports<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>integer<sp/>or<sp/>flag<sp/>names<sp/>separated<sp/>by<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal">std::string<sp/>HIP_DB_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*var_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*envVarString)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>var_ptr_int<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(var_ptr);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>e(envVarString);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>trim(&amp;e);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!e.empty()<sp/>&amp;&amp;<sp/>isdigit(e.c_str()[0]))<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>strtol(envVarString,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*var_ptr_int<sp/>=<sp/>(int)<sp/>(v);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*var_ptr_int<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tokens;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenize(e,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/>&amp;tokens);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t=tokens.begin();<sp/>t!=<sp/>tokens.end();<sp/>t++)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;DB_MAX_FLAG;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(t-&gt;c_str(),<sp/>dbName[i]._shortName))<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*var_ptr_int<sp/>|=<sp/>(1&lt;&lt;i);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>else<sp/>throw<sp/>error?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HIP_DB_string(*var_ptr_int);;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Callback<sp/>used<sp/>to<sp/>process<sp/>list<sp/>of<sp/>visible<sp/>devices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal">std::string<sp/>HIP_VISIBLE_DEVICES_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*var_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*envVarString)</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>the<sp/>string<sp/>stream<sp/>of<sp/>env<sp/>and<sp/>store<sp/>the<sp/>device<sp/>ids<sp/>to<sp/>g_hip_visible_devices<sp/>global<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str<sp/>=<sp/>envVarString;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istringstream<sp/>ss(str);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>device_id;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up<sp/>the<sp/>defult<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>g_hip_visible_devices.clear();</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>g_visible_device<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>visible<sp/>device<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::getline(ss,<sp/>device_id,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(atoi(device_id.c_str())<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_hip_visible_devices.push_back(atoi(device_id.c_str()));</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Any<sp/>device<sp/>number<sp/>after<sp/>invalid<sp/>number<sp/>will<sp/>not<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>valueString;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>out<sp/>the<sp/>number<sp/>of<sp/>ids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;g_hip_visible_devices.size();i++)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueString<sp/>+=<sp/>std::to_string((g_hip_visible_devices[i]));</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueString<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valueString;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>change<sp/>last<sp/>arg<sp/>to<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseTrigger(std::string<sp/>triggerString,<sp/>std::vector&lt;ProfTrigger&gt;<sp/>&amp;profTriggers<sp/>)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tidApiTokens;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>tokenize(std::string(triggerString),<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">,<sp/>&amp;tidApiTokens);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t=tidApiTokens.begin();<sp/>t<sp/>!=<sp/>tidApiTokens.end();<sp/>t++)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>oneToken;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;token=&quot;<sp/>&lt;&lt;<sp/>*t<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenize(std::string(*t),<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/>&amp;oneToken);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>apiTrigger<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oneToken.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>case<sp/>with<sp/>just<sp/>apiNum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apiTrigger<sp/>=<sp/>std::strtoull(oneToken[0].c_str(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oneToken.size()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>case<sp/>with<sp/>tid.apiNum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tid<sp/>=<sp/>std::strtoul(oneToken[0].c_str(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apiTrigger<sp/>=<sp/>std::strtoull(oneToken[1].c_str(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classihipException" kindref="compound">ihipException</ref>(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a44f847c5914be2177feac107dcb096d1" kindref="member">hipErrorRuntimeOther</ref>);<sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-&gt;<sp/>bad<sp/>env<sp/>var?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tid<sp/>&gt;<sp/>10000)<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classihipException" kindref="compound">ihipException</ref>(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a44f847c5914be2177feac107dcb096d1" kindref="member">hipErrorRuntimeOther</ref>);<sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-&gt;<sp/>bad<sp/>env<sp/>var?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profTriggers.resize(tid+1);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;tid:&quot;<sp/>&lt;&lt;<sp/>tid<sp/>&lt;&lt;<sp/>&quot;<sp/>add:<sp/>&quot;<sp/>&lt;&lt;<sp/>apiTrigger<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profTriggers[tid].add(apiTrigger);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid=1;<sp/>tid&lt;profTriggers.size();<sp/>tid++)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profTriggers[tid].sort();</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profTriggers[tid].print(tid);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HipReadEnv()</highlight></codeline>
<codeline lineno="1212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Environment<sp/>variables</highlight></codeline>
<codeline lineno="1215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>g_hip_visible_devices.push_back(0);<sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>default<sp/>value<sp/>of<sp/>visible<sp/>devices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_PRINT_ENV,<sp/>0,<sp/><sp/></highlight><highlight class="stringliteral">&quot;Print<sp/>HIP<sp/>environment<sp/>variables.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--<sp/>READ<sp/>HIP_PRINT_ENV<sp/>env<sp/>first,<sp/>since<sp/>it<sp/>has<sp/>impact<sp/>on<sp/>later<sp/>env<sp/>var<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>In<sp/>HIP/hcc,<sp/>this<sp/>variable<sp/>blocks<sp/>after<sp/>both<sp/>kernel<sp/>commmands<sp/>and<sp/>data<sp/>transfer.<sp/><sp/>Maybe<sp/>should<sp/>be<sp/>bit-mask<sp/>for<sp/>each<sp/>command<sp/>type?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_LAUNCH_BLOCKING,<sp/>CUDA_LAUNCH_BLOCKING,<sp/></highlight><highlight class="stringliteral">&quot;Make<sp/>HIP<sp/>kernel<sp/>launches<sp/>&apos;host-synchronous&apos;,<sp/>so<sp/>they<sp/>block<sp/>until<sp/>any<sp/>kernel<sp/>launches.<sp/>Alias:<sp/>CUDA_LAUNCH_BLOCKING.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_S(release,<sp/>HIP_LAUNCH_BLOCKING_KERNELS,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Comma-separated<sp/>list<sp/>of<sp/>kernel<sp/>names<sp/>to<sp/>make<sp/>host-synchronous,<sp/>so<sp/>they<sp/>block<sp/>until<sp/>completed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HIP_LAUNCH_BLOCKING_KERNELS.empty())<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenize(HIP_LAUNCH_BLOCKING_KERNELS,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">,<sp/>&amp;g_hipLaunchBlockingKernels);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_API_BLOCKING,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Make<sp/>HIP<sp/>APIs<sp/>&apos;host-synchronous&apos;,<sp/>so<sp/>they<sp/>block<sp/>until<sp/>completed.<sp/><sp/>Impacts<sp/>hipMemcpyAsync,<sp/>hipMemsetAsync.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_HIDDEN_FREE_MEM,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Amount<sp/>of<sp/>memory<sp/>to<sp/>hide<sp/>from<sp/>the<sp/>free<sp/>memory<sp/>reported<sp/>by<sp/>hipMemGetInfo,<sp/>specified<sp/>in<sp/>MB.<sp/>Impacts<sp/>hipMemGetInfo.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_C(release,<sp/>HIP_DB,<sp/>0,<sp/><sp/></highlight><highlight class="stringliteral">&quot;Print<sp/>debug<sp/>info.<sp/><sp/>Bitmask<sp/>(HIP_DB=0xff)<sp/>or<sp/>flags<sp/>separated<sp/>by<sp/>&apos;+&apos;<sp/>(HIP_DB=api+sync+mem+copy)&quot;</highlight><highlight class="normal">,<sp/>HIP_DB_callback);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((HIP_DB<sp/>&amp;<sp/>(1&lt;&lt;DB_API))<sp/><sp/>&amp;&amp;<sp/>(HIP_TRACE_API<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>HIP_TRACE_API<sp/>default<sp/>before<sp/>we<sp/>read<sp/>it,<sp/>so<sp/>it<sp/>is<sp/>printed<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HIP_TRACE_API<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_TRACE_API,<sp/>0,<sp/><sp/></highlight><highlight class="stringliteral">&quot;Trace<sp/>each<sp/>HIP<sp/>API<sp/>call.<sp/><sp/>Print<sp/>function<sp/>name<sp/>and<sp/>return<sp/>code<sp/>to<sp/>stderr<sp/>as<sp/>program<sp/>executes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_S(release,<sp/>HIP_TRACE_API_COLOR,<sp/>0,<sp/><sp/></highlight><highlight class="stringliteral">&quot;Color<sp/>to<sp/>use<sp/>for<sp/>HIP_API.<sp/><sp/>None/Red/Green/Yellow/Blue/Magenta/Cyan/White&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_PROFILE_API,<sp/>0,<sp/><sp/></highlight><highlight class="stringliteral">&quot;Add<sp/>HIP<sp/>API<sp/>markers<sp/>to<sp/>ATP<sp/>file<sp/>generated<sp/>with<sp/>CodeXL.<sp/>0x1=short<sp/>API<sp/>name,<sp/>0x2=full<sp/>API<sp/>name<sp/>including<sp/>args.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_S(release,<sp/>HIP_DB_START_API,<sp/>0,<sp/><sp/></highlight><highlight class="stringliteral">&quot;Comma-separated<sp/>list<sp/>of<sp/>tid.api_seq_num<sp/>for<sp/>when<sp/>to<sp/>start<sp/>debug<sp/>and<sp/>profiling.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_S(release,<sp/>HIP_DB_STOP_API,<sp/>0,<sp/><sp/></highlight><highlight class="stringliteral">&quot;Comma-separated<sp/>list<sp/>of<sp/>tid.api_seq_num<sp/>for<sp/>when<sp/>to<sp/>stop<sp/>debug<sp/>and<sp/>profiling.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_C(release,<sp/>HIP_VISIBLE_DEVICES,<sp/>CUDA_VISIBLE_DEVICES,<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>devices<sp/>whose<sp/>index<sp/>is<sp/>present<sp/>in<sp/>the<sp/>sequence<sp/>are<sp/>visible<sp/>to<sp/>HIP<sp/>applications<sp/>and<sp/>they<sp/>are<sp/>enumerated<sp/>in<sp/>the<sp/>order<sp/>of<sp/>sequence.&quot;</highlight><highlight class="normal">,<sp/>HIP_VISIBLE_DEVICES_callback<sp/>);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_WAIT_MODE,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Force<sp/>synchronization<sp/>mode.<sp/>1=<sp/>force<sp/>yield,<sp/>2=force<sp/>spin,<sp/>0=defaults<sp/>specified<sp/>in<sp/>application&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_FORCE_P2P_HOST,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Force<sp/>use<sp/>of<sp/>host/staging<sp/>copy<sp/>for<sp/>peer-to-peer<sp/>copies.1=always<sp/>use<sp/>copies,<sp/>2=always<sp/>return<sp/>false<sp/>for<sp/>hipDeviceCanAccessPeer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_FORCE_SYNC_COPY,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Force<sp/>all<sp/>copies<sp/>(even<sp/>hipMemcpyAsync)<sp/>to<sp/>use<sp/>sync<sp/>copies&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_FAIL_SOC,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Fault<sp/>on<sp/>Sub-Optimal-Copy,<sp/>rather<sp/>than<sp/>use<sp/>a<sp/>slower<sp/>but<sp/>functional<sp/>implementation.<sp/><sp/>Bit<sp/>0x1=Fail<sp/>on<sp/>async<sp/>copy<sp/>with<sp/>unpinned<sp/>memory.<sp/><sp/>Bit<sp/>0x2=Fail<sp/>peer<sp/>copy<sp/>rather<sp/>than<sp/>use<sp/>staging<sp/>buffer<sp/>copy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_SYNC_HOST_ALLOC,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Sync<sp/>before<sp/>and<sp/>after<sp/>all<sp/>host<sp/>memory<sp/>allocations.<sp/><sp/>May<sp/>help<sp/>stability&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_INIT_ALLOC,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;If<sp/>not<sp/>-1,<sp/>initialize<sp/>allocated<sp/>memory<sp/>to<sp/>specified<sp/>byte&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_SYNC_NULL_STREAM,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Synchronize<sp/>on<sp/>host<sp/>for<sp/>null<sp/>stream<sp/>submissions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_FORCE_NULL_STREAM,<sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Force<sp/>all<sp/>stream<sp/>allocations<sp/>to<sp/>secretly<sp/>return<sp/>the<sp/>null<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_SYNC_STREAM_WAIT,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;hipStreamWaitEvent<sp/>will<sp/>synchronize<sp/>to<sp/>host&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_HOST_COHERENT,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;If<sp/>set,<sp/>all<sp/>host<sp/>memory<sp/>will<sp/>be<sp/>allocated<sp/>as<sp/>fine-grained<sp/>system<sp/>memory.<sp/><sp/>This<sp/>allows<sp/>threadfence_system<sp/>to<sp/>work<sp/>but<sp/>prevents<sp/>host<sp/>memory<sp/>from<sp/>being<sp/>cached<sp/>on<sp/>GPU<sp/>which<sp/>may<sp/>have<sp/>performance<sp/>impact.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HCC_OPT_FLUSH,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;When<sp/>set,<sp/>use<sp/>agent-scope<sp/>fence<sp/>operations<sp/>rather<sp/>than<sp/>system-scope<sp/>fence<sp/>operationsflush<sp/>when<sp/>possible.<sp/>This<sp/>flag<sp/>controls<sp/>both<sp/>HIP<sp/>and<sp/>HCC<sp/>behavior.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>READ_ENV_I(release,<sp/>HIP_EVENT_SYS_RELEASE,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;If<sp/>set,<sp/>event<sp/>are<sp/>created<sp/>with<sp/>hipEventReleaseToSystem<sp/>by<sp/>default.<sp/><sp/>If<sp/>0,<sp/>events<sp/>are<sp/>created<sp/>with<sp/>hipEventReleaseToDevice<sp/>by<sp/>default.<sp/><sp/>The<sp/>defaults<sp/>can<sp/>be<sp/>overridden<sp/>by<sp/>specifying<sp/>hipEventReleaseToSystem<sp/>or<sp/>hipEventReleaseToDevice<sp/>flag<sp/>when<sp/>creating<sp/>the<sp/>event.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>flags<sp/>have<sp/>both<sp/>compile-time<sp/>and<sp/>runtime<sp/>flags<sp/>-<sp/>generate<sp/>a<sp/>warning<sp/>if<sp/>user<sp/>enables<sp/>the<sp/>runtime<sp/>flag<sp/>but<sp/>the<sp/>compile-time<sp/>flag<sp/>is<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_DB<sp/>&amp;&amp;<sp/>!COMPILE_HIP_DB)<sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;warning:<sp/>env<sp/>var<sp/>HIP_DB=0x%x<sp/>but<sp/>COMPILE_HIP_DB=0.<sp/><sp/>(perhaps<sp/>enable<sp/>COMPILE_HIP_DB<sp/>in<sp/>src<sp/>code<sp/>before<sp/>compiling?)\n&quot;</highlight><highlight class="normal">,<sp/>HIP_DB);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_TRACE_API<sp/>&amp;&amp;<sp/>!COMPILE_HIP_TRACE_API)<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;warning:<sp/>env<sp/>var<sp/>HIP_TRACE_API=0x%x<sp/>but<sp/>COMPILE_HIP_TRACE_API=0.<sp/><sp/>(perhaps<sp/>enable<sp/>COMPILE_HIP_TRACE_API<sp/>in<sp/>src<sp/>code<sp/>before<sp/>compiling?)\n&quot;</highlight><highlight class="normal">,<sp/>HIP_DB);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_TRACE_API)<sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HIP_DB|=0x1;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_PROFILE_API<sp/>&amp;&amp;<sp/>!COMPILE_HIP_ATP_MARKER)<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;warning:<sp/>env<sp/>var<sp/>HIP_PROFILE_API=0x%x<sp/>but<sp/>COMPILE_HIP_ATP_MARKER=0.<sp/><sp/>(perhaps<sp/>enable<sp/>COMPILE_HIP_ATP_MARKER<sp/>in<sp/>src<sp/>code<sp/>before<sp/>compiling?)\n&quot;</highlight><highlight class="normal">,<sp/>HIP_PROFILE_API);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HIP_PROFILE_API<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_DB)<sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;HIP_DB=0x%x<sp/>[%s]\n&quot;</highlight><highlight class="normal">,<sp/>HIP_DB,<sp/>HIP_DB_string(HIP_DB).c_str());</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(HIP_TRACE_API_COLOR.begin(),<sp/><sp/>HIP_TRACE_API_COLOR.end(),<sp/>HIP_TRACE_API_COLOR.begin(),<sp/>::tolower);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_TRACE_API_COLOR<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_COLOR<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_COLOR_END<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_TRACE_API_COLOR<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_COLOR<sp/>=<sp/>KRED;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_TRACE_API_COLOR<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_COLOR<sp/>=<sp/>KGRN;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_TRACE_API_COLOR<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;yellow&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_COLOR<sp/>=<sp/>KYEL;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_TRACE_API_COLOR<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_COLOR<sp/>=<sp/>KBLU;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_TRACE_API_COLOR<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;magenta&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_COLOR<sp/>=<sp/>KMAG;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_TRACE_API_COLOR<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;cyan&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_COLOR<sp/>=<sp/>KCYN;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_TRACE_API_COLOR<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;white&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_COLOR<sp/>=<sp/>KWHT;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;warning:<sp/>env<sp/>var<sp/>HIP_TRACE_API_COLOR=%s<sp/>must<sp/>be<sp/>None/Red/Green/Yellow/Blue/Magenta/Cyan/White&quot;</highlight><highlight class="normal">,<sp/>HIP_TRACE_API_COLOR.c_str());</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>parseTrigger(HIP_DB_START_API,<sp/>g_dbStartTriggers);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>parseTrigger(HIP_DB_STOP_API,<sp/><sp/>g_dbStopTriggers);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>called<sp/>one-time<sp/>at<sp/>initialization<sp/>time<sp/>to<sp/>construct<sp/>a<sp/>table<sp/>of<sp/>all<sp/>GPU<sp/>devices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="comment">//HIP/CUDA<sp/>uses<sp/>integer<sp/>&quot;deviceIds&quot;<sp/>-<sp/>these<sp/>are<sp/>indexes<sp/>into<sp/>this<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="comment">//AMP<sp/>maintains<sp/>a<sp/>table<sp/>of<sp/>accelerators,<sp/>but<sp/>some<sp/>are<sp/>emulated<sp/>-<sp/>ie<sp/>for<sp/>debug<sp/>or<sp/>CPU.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>function<sp/>creates<sp/>a<sp/>vector<sp/>with<sp/>only<sp/>the<sp/>GPU<sp/>accelerators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="comment">//It<sp/>is<sp/>called<sp/>with<sp/>C++11<sp/>call_once,<sp/>which<sp/>provided<sp/>thread-safety.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipInit()</highlight></codeline>
<codeline lineno="1325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>COMPILE_HIP_ATP_MARKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>amdtInitializeActivityLogger();</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>amdtScopedMarker(</highlight><highlight class="stringliteral">&quot;ihipInit&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;HIP&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>HipReadEnv();</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Build<sp/>a<sp/>table<sp/>of<sp/>valid<sp/>compute<sp/>devices.</highlight></codeline>
<codeline lineno="1338"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>accs<sp/>=<sp/>hc::accelerator::get_all();</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceCnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;accs.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>accs[i].get_is_emulated())<sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deviceCnt++;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>hip<sp/>visible<sp/>devices<sp/>are<sp/>within<sp/>the<sp/>deviceCnt<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>g_hip_visible_devices.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g_hip_visible_devices[i]<sp/>&gt;=<sp/>deviceCnt){</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>any<sp/>DeviceID<sp/>after<sp/>invalid<sp/>DeviceID<sp/>will<sp/>be<sp/>erased.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_hip_visible_devices.resize(i);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>hsa_status_t<sp/>err<sp/>=<sp/>hsa_iterate_agents(findCpuAgent,<sp/>&amp;g_cpu_agent);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>HSA_STATUS_INFO_BREAK)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>didn&apos;t<sp/>find<sp/>a<sp/>CPU.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classihipException" kindref="compound">ihipException</ref>(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a44f847c5914be2177feac107dcb096d1" kindref="member">hipErrorRuntimeOther</ref>);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>g_deviceArray<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref>*<sp/><sp/>[deviceCnt];</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>g_deviceCnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;accs.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>device<sp/>id<sp/>is<sp/>included<sp/>in<sp/>the<sp/>HIP_VISIBLE_DEVICES<sp/>env<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>accs[i].get_is_emulated())<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(g_hip_visible_devices.begin(),<sp/>g_hip_visible_devices.end(),<sp/>(i-1))<sp/>==<sp/>g_hip_visible_devices.end()<sp/>&amp;&amp;<sp/>g_visible_device)</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>device<sp/>is<sp/>not<sp/>in<sp/>visible<sp/>devices<sp/>list,<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_deviceArray[g_deviceCnt]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref>(g_deviceCnt,<sp/>deviceCnt,<sp/>accs[i]);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_deviceCnt++;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>g_allAgents<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">hsa_agent_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(malloc((g_deviceCnt+1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hsa_agent_t)));</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>g_allAgents[0]<sp/>=<sp/>g_cpu_agent;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;g_deviceCnt;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_allAgents[i+1]<sp/>=<sp/>g_deviceArray[i]-&gt;_hsaAgent;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>g_numLogicalThreads<sp/>=<sp/>std::thread::hardware_concurrency();</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>HIP_VISIBLE_DEVICES<sp/>is<sp/>not<sp/>set,<sp/>make<sp/>sure<sp/>all<sp/>devices<sp/>are<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!g_visible_device)<sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(deviceCnt<sp/>==<sp/>g_deviceCnt);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;pid=%u<sp/>%-30s<sp/>g_numLogicalThreads=%u\n&quot;</highlight><highlight class="normal">,<sp/>getpid(),<sp/></highlight><highlight class="stringliteral">&quot;&lt;ihipInit&gt;&quot;</highlight><highlight class="normal">,<sp/>g_numLogicalThreads);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>stream<sp/>to<sp/>use<sp/>for<sp/>a<sp/>command<sp/>submission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>stream==NULL<sp/>synchronize<sp/>appropriately<sp/>with<sp/>other<sp/>streams<sp/>and<sp/>return<sp/>the<sp/>default<sp/>av<sp/>for<sp/>the<sp/>device.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>stream<sp/>is<sp/>valid,<sp/>return<sp/>the<sp/>AV<sp/>to<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>ihipSyncAndResolveStream(<ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>stream)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream<sp/>==<sp/>hipStreamNull<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Submitting<sp/>to<sp/>NULL<sp/>stream,<sp/>call<sp/>locked_syncDefaultStream<sp/>to<sp/>wait<sp/>for<sp/>all<sp/>other<sp/>streams:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*ctx<sp/>=<sp/>ihipGetTlsDefaultCtx();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;ihipSyncAndResolveStream<sp/>%s<sp/>wait<sp/>on<sp/>default<sp/>stream\n&quot;</highlight><highlight class="normal">,<sp/>ToString(stream).c_str());</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HIP_API_PER_THREAD_DEFAULT_STREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;locked_syncDefaultStream(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;_defaultStream;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Submitting<sp/>to<sp/>a<sp/>&quot;normal&quot;<sp/>stream,<sp/>just<sp/>wait<sp/>for<sp/>null<sp/>stream:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(stream-&gt;_flags<sp/>&amp;<sp/><ref refid="group__GlobalDefs_1gaaba9ae995d9b43b7d1ee70c6fa12c57d" kindref="member">hipStreamNonBlocking</ref>))<sp/><sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_SYNC_NULL_STREAM)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;ihipSyncAndResolveStream<sp/>%s<sp/>host-wait<sp/>on<sp/>default<sp/>stream\n&quot;</highlight><highlight class="normal">,<sp/>ToString(stream).c_str());</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;getCtx()-&gt;_defaultStream-&gt;locked_wait();</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classihipStream__t" kindref="compound">ihipStream_t</ref><sp/>*defaultStream<sp/>=<sp/>stream-&gt;getCtx()-&gt;_defaultStream;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needGatherMarker<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>gather<sp/>together<sp/>other<sp/>markers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc::completion_future<sp/>dcf;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>defaultStreamCrit(defaultStream-&gt;criticalData());</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>could<sp/>call<sp/>create_blocking_marker(queue)<sp/>or<sp/>uses<sp/>existing<sp/>marker.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!defaultStreamCrit-&gt;_av.get_is_empty())<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needGatherMarker<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s<sp/>adding<sp/>marker<sp/>to<sp/>default<sp/>%s<sp/>for<sp/>dependency\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ToString(stream).c_str(),<sp/>ToString(defaultStream).c_str());</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dcf<sp/>=<sp/>defaultStreamCrit-&gt;_av.create_marker(hc::accelerator_scope);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s<sp/>skipping<sp/>marker<sp/>since<sp/>default<sp/>stream<sp/>is<sp/>empty\n&quot;</highlight><highlight class="normal">,<sp/>ToString(stream).c_str());</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needGatherMarker)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>any<sp/>commands<sp/>sent<sp/>to<sp/>this<sp/>stream<sp/>wait<sp/>on<sp/>the<sp/>NULL<sp/>stream<sp/>before<sp/>continuing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>thisStreamCrit(stream-&gt;criticalData());</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>could<sp/>be<sp/>&quot;noret&quot;<sp/>version<sp/>of<sp/>create_blocking_marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisStreamCrit-&gt;_av.create_blocking_marker(dcf,<sp/>hc::accelerator_scope);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s<sp/>adding<sp/>marker<sp/>to<sp/>wait<sp/>for<sp/>freshly<sp/>recorded<sp/>default-stream<sp/>marker<sp/>\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ToString(stream).c_str());</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipPrintKernelLaunch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kernelName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>grid_launch_parm<sp/>*lp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>stream)</highlight></codeline>
<codeline lineno="1457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((HIP_TRACE_API<sp/>&amp;<sp/>(1&lt;&lt;TRACE_KCMD))<sp/>||<sp/>HIP_PROFILE_API<sp/>||<sp/>(COMPILE_HIP_DB<sp/>&amp;<sp/>HIP_TRACE_API))<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>os;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/><sp/>&lt;&lt;<sp/>tls_tidInfo.tid()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tls_tidInfo.apiSeqNum()</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>hipLaunchKernel<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kernelName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>gridDim:&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>lp-&gt;grid_dim</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>groupDim:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lp-&gt;group_dim</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>sharedMem:+&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lp-&gt;dynamic_group_mem_bytes</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*stream;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(COMPILE_HIP_DB<sp/>&amp;&amp;<sp/>HIP_TRACE_API)<sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>fullStr;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recordApiTrace(&amp;fullStr,<sp/>os.str());</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_PROFILE_API<sp/>==<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>shortAtpString(</highlight><highlight class="stringliteral">&quot;hipLaunchKernel:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shortAtpString<sp/>+=<sp/>kernelName;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MARKER_BEGIN(shortAtpString.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;HIP&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_PROFILE_API<sp/>==<sp/>0x2)<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MARKER_BEGIN(os.str().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;HIP&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Called<sp/>just<sp/>before<sp/>a<sp/>kernel<sp/>is<sp/>launched<sp/>from<sp/>hipLaunchKernel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allows<sp/>runtime<sp/>to<sp/>track<sp/>some<sp/>information<sp/>about<sp/>the<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>ihipPreLaunchKernel(<ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>stream,<sp/><ref refid="structdim3" kindref="compound">dim3</ref><sp/>grid,<sp/><ref refid="structdim3" kindref="compound">dim3</ref><sp/>block,<sp/>grid_launch_parm<sp/>*lp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kernelNameStr)</highlight></codeline>
<codeline lineno="1486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>HIP_INIT();</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>ihipSyncAndResolveStream(stream);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.x<sp/>=<sp/>grid.<ref refid="structdim3_1ac866c05f83a28dac20a153fc65b3b16c" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.y<sp/>=<sp/>grid.<ref refid="structdim3_1a83e60e072f7e8bdfde6ac05053cbb370" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.z<sp/>=<sp/>grid.<ref refid="structdim3_1a866e38993ecc4e76fd47311236c16b04" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.x<sp/>=<sp/>block.<ref refid="structdim3_1ac866c05f83a28dac20a153fc65b3b16c" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.y<sp/>=<sp/>block.<ref refid="structdim3_1a83e60e072f7e8bdfde6ac05053cbb370" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.z<sp/>=<sp/>block.<ref refid="structdim3_1a866e38993ecc4e76fd47311236c16b04" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;barrier_bit<sp/>=<sp/>barrier_bit_queue_default;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;launch_fence<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crit<sp/>=<sp/>stream-&gt;lockopen_preKernelCommand();</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;av<sp/>=<sp/>&amp;(crit-&gt;_av);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;cf<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>ihipPrintKernelLaunch(kernelNameStr,<sp/>lp,<sp/>stream);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stream);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>ihipPreLaunchKernel(<ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>stream,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>grid,<sp/><ref refid="structdim3" kindref="compound">dim3</ref><sp/>block,<sp/>grid_launch_parm<sp/>*lp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kernelNameStr)</highlight></codeline>
<codeline lineno="1508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>HIP_INIT();</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>ihipSyncAndResolveStream(stream);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.x<sp/>=<sp/>grid;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.z<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.x<sp/>=<sp/>block.<ref refid="structdim3_1ac866c05f83a28dac20a153fc65b3b16c" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.y<sp/>=<sp/>block.<ref refid="structdim3_1a83e60e072f7e8bdfde6ac05053cbb370" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.z<sp/>=<sp/>block.<ref refid="structdim3_1a866e38993ecc4e76fd47311236c16b04" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;barrier_bit<sp/>=<sp/>barrier_bit_queue_default;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;launch_fence<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crit<sp/>=<sp/>stream-&gt;lockopen_preKernelCommand();</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;av<sp/>=<sp/>&amp;(crit-&gt;_av);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;cf<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>ihipPrintKernelLaunch(kernelNameStr,<sp/>lp,<sp/>stream);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stream);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>ihipPreLaunchKernel(<ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>stream,<sp/><ref refid="structdim3" kindref="compound">dim3</ref><sp/>grid,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>block,<sp/>grid_launch_parm<sp/>*lp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kernelNameStr)</highlight></codeline>
<codeline lineno="1529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>HIP_INIT();</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>ihipSyncAndResolveStream(stream);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.x<sp/>=<sp/>grid.<ref refid="structdim3_1ac866c05f83a28dac20a153fc65b3b16c" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.y<sp/>=<sp/>grid.<ref refid="structdim3_1a83e60e072f7e8bdfde6ac05053cbb370" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.z<sp/>=<sp/>grid.<ref refid="structdim3_1a866e38993ecc4e76fd47311236c16b04" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.x<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.z<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;barrier_bit<sp/>=<sp/>barrier_bit_queue_default;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;launch_fence<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crit<sp/>=<sp/>stream-&gt;lockopen_preKernelCommand();</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;av<sp/>=<sp/>&amp;(crit-&gt;_av);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;cf<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>ihipPrintKernelLaunch(kernelNameStr,<sp/>lp,<sp/>stream);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stream);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>ihipPreLaunchKernel(<ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>stream,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>grid,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>block,<sp/>grid_launch_parm<sp/>*lp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kernelNameStr)</highlight></codeline>
<codeline lineno="1550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>HIP_INIT();</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>ihipSyncAndResolveStream(stream);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.x<sp/>=<sp/>grid;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;grid_dim.z<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.x<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;group_dim.z<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;barrier_bit<sp/>=<sp/>barrier_bit_queue_default;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;launch_fence<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crit<sp/>=<sp/>stream-&gt;lockopen_preKernelCommand();</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;av<sp/>=<sp/>&amp;(crit-&gt;_av);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>lp-&gt;cf<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>ihipPrintKernelLaunch(kernelNameStr,<sp/>lp,<sp/>stream);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stream);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="comment">//Called<sp/>after<sp/>kernel<sp/>finishes<sp/>execution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>releases<sp/>the<sp/>lock<sp/>on<sp/>the<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipPostLaunchKernel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kernelName,<sp/><ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>stream,<sp/>grid_launch_parm<sp/>&amp;lp)</highlight></codeline>
<codeline lineno="1576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;ihipPostLaunchKernel,<sp/>unlocking<sp/>stream\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;lockclose_postKernelCommand(kernelName,<sp/>lp.av);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>MARKER_END();</highlight></codeline>
<codeline lineno="1581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HIP<sp/>API<sp/>Implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementor<sp/>notes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_<sp/>All<sp/>functions<sp/>should<sp/>call<sp/>HIP_INIT_API<sp/>as<sp/>first<sp/>action:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>HIP_INIT_API(&lt;function_arguments&gt;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>ALl<sp/>functions<sp/>should<sp/>use<sp/>ihipLogStatus<sp/>to<sp/>return<sp/>error<sp/>code<sp/>(not<sp/>return<sp/>error<sp/>directly).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="comment">//=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ihipErrorString(<ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref><sp/>hip_error)</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(hip_error)<sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aadfbdb847b149723c684ebd764556063" kindref="member">hipSuccess</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipSuccess&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorOutOfMemory<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorOutOfMemory&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorNotInitialized<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorNotInitialized&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorDeinitialized<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorDeinitialized&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorProfilerDisabled<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorProfilerDisabled&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorProfilerNotInitialized<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorProfilerNotInitialized&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorProfilerAlreadyStarted<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorProfilerAlreadyStarted&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorProfilerAlreadyStopped<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorProfilerAlreadyStopped&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorInvalidImage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidImage&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594ad9d895f7f4dbf63a4586b2aab593c9fe" kindref="member">hipErrorInvalidContext</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidContext&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorContextAlreadyCurrent<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorContextAlreadyCurrent&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorMapFailed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorMapFailed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorUnmapFailed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorUnmapFailed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorArrayIsMapped<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorArrayIsMapped&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorAlreadyMapped<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorAlreadyMapped&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorNoBinaryForGpu<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorNoBinaryForGpu&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorAlreadyAcquired<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorAlreadyAcquired&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorNotMapped<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorNotMapped&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorNotMappedAsArray<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorNotMappedAsArray&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorNotMappedAsPointer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorNotMappedAsPointer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorECCNotCorrectable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorECCNotCorrectable&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorUnsupportedLimit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorUnsupportedLimit&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorContextAlreadyInUse<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorContextAlreadyInUse&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorPeerAccessUnsupported<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorPeerAccessUnsupported&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594ae508537d5e9a293bb1e63802d4a61380" kindref="member">hipErrorInvalidKernelFile</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidKernelFile&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorInvalidGraphicsContext<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidGraphicsContext&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorInvalidSource<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidSource&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorFileNotFound<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorFileNotFound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorSharedObjectSymbolNotFound<sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorSharedObjectSymbolNotFound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorSharedObjectInitFailed<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorSharedObjectInitFailed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorOperatingSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorOperatingSystem&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorSetOnActiveProcess<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorSetOnActiveProcess&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorInvalidHandle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidHandle&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorNotFound<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorNotFound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorIllegalAddress<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorIllegalAddress&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorMissingConfiguration<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorMissingConfiguration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a8293288a10109874749afe2562db09f2" kindref="member">hipErrorMemoryAllocation</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorMemoryAllocation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a7e935ae88ee1f9ff3920156ac6864520" kindref="member">hipErrorInitializationError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInitializationError&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a3df72146e762c5a901d3af06027a1de9" kindref="member">hipErrorLaunchFailure</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorLaunchFailure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorPriorLaunchFailure<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorPriorLaunchFailure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorLaunchTimeOut<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorLaunchTimeOut&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a3ea57f211997a84fa1c582414bcabc47" kindref="member">hipErrorLaunchOutOfResources</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorLaunchOutOfResources&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorInvalidDeviceFunction<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidDeviceFunction&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipErrorInvalidConfiguration<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidConfiguration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a07ab9b704ea693c1781a52741c60cd0d" kindref="member">hipErrorInvalidDevice</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidDevice&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a1e8215fe1108a508bad3944bce7b4d83" kindref="member">hipErrorInvalidValue</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidValue&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a37a93fcd2b0aed9bf52b82fa26031e6f" kindref="member">hipErrorInvalidDevicePointer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidDevicePointer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594ae35ad9fb66b7c33f21a021efe89975b0" kindref="member">hipErrorInvalidMemcpyDirection</ref><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidMemcpyDirection&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aa74e64c5b2f5fb0d6a92681f5b234073" kindref="member">hipErrorUnknown</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorUnknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a88e525a7c8f35552dfada58e9f2f6d3a" kindref="member">hipErrorInvalidResourceHandle</ref><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorInvalidResourceHandle&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aa9638063c8746a9d1fda2b2069a0a9f1" kindref="member">hipErrorNotReady</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorNotReady&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594ad4406972c318df36d231310a15131c24" kindref="member">hipErrorNoDevice</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorNoDevice&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a5399c146f91246f8b77abcd4ea30e7ac" kindref="member">hipErrorPeerAccessAlreadyEnabled</ref><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorPeerAccessAlreadyEnabled&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a2ee0bf2e64840f253e4a1b12bbaf2d09" kindref="member">hipErrorPeerAccessNotEnabled</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorPeerAccessNotEnabled&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a1159eb9a6be66bea740a8bfb61378723" kindref="member">hipErrorRuntimeMemory</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorRuntimeMemory&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a44f847c5914be2177feac107dcb096d1" kindref="member">hipErrorRuntimeOther</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorRuntimeOther&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a9d7173cea72aace620a83d502569de1b" kindref="member">hipErrorHostMemoryAlreadyRegistered</ref><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorHostMemoryAlreadyRegistered&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a6901476ca88eed786fb8be003d9661d9" kindref="member">hipErrorHostMemoryNotRegistered</ref><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorHostMemoryNotRegistered&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594ab556409e11ddb0c4cf77a2f4fc91ea9e" kindref="member">hipErrorTbd</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorTbd&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hipErrorUnknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1665"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>copyEngineCtx<sp/>can<sp/>see<sp/>the<sp/>memory<sp/>allocated<sp/>on<sp/>dstCtx<sp/>and<sp/>srcCtx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>peer-list<sp/>for<sp/>a<sp/>context<sp/>controls<sp/>which<sp/>contexts<sp/>have<sp/>access<sp/>to<sp/>the<sp/>memory<sp/>allocated<sp/>on<sp/>that<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>So<sp/>we<sp/>check<sp/>dstCtx&apos;s<sp/>and<sp/>srcCtx&apos;s<sp/>peerList<sp/>to<sp/>see<sp/>if<sp/>the<sp/>both<sp/>include<sp/>thisCtx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ihipStream_t::canSeeMemory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*copyEngineCtx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hc::AmPointerInfo<sp/>*dstPtrInfo,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hc::AmPointerInfo<sp/>*srcPtrInfo)</highlight></codeline>
<codeline lineno="1674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>this<sp/>is<sp/>a<sp/>device-to-device<sp/>copy<sp/>with<sp/>all<sp/>memory<sp/>available<sp/>to<sp/>the<sp/>requested<sp/>copy<sp/>engine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>pointer-info<sp/>stores<sp/>a<sp/>deviceID<sp/>not<sp/>a<sp/>context,may<sp/>have<sp/>some<sp/>unusual<sp/>side-effects<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstPtrInfo-&gt;_sizeBytes<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*dstCtx<sp/>=<sp/>ihipGetPrimaryCtx(dstPtrInfo-&gt;_appId);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copyEngineCtx<sp/>!=<sp/>dstCtx)<sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>checks<sp/>peer<sp/>list<sp/>if<sp/>contexts<sp/>are<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_CtxCrit_t</ref><sp/><sp/>ctxCrit(dstCtx-&gt;criticalData());</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tprintf(DB_SYNC,<sp/>&quot;dstCrit<sp/>lock<sp/>succeeded\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ctxCrit-&gt;isPeerWatcher(copyEngineCtx))<sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>pointer-info<sp/>stores<sp/>a<sp/>deviceID<sp/>not<sp/>a<sp/>context,may<sp/>have<sp/>some<sp/>unusual<sp/>side-effects<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcPtrInfo-&gt;_sizeBytes<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*srcCtx<sp/>=<sp/>ihipGetPrimaryCtx(srcPtrInfo-&gt;_appId);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copyEngineCtx<sp/>!=<sp/>srcCtx)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>checks<sp/>peer<sp/>list<sp/>if<sp/>contexts<sp/>are<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_CtxCrit_t</ref><sp/><sp/>ctxCrit(srcCtx-&gt;criticalData());</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tprintf(DB_SYNC,<sp/>&quot;srcCrit<sp/>lock<sp/>succeeded\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ctxCrit-&gt;isPeerWatcher(copyEngineCtx))<sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CASE_STRING(X)<sp/><sp/>case<sp/>X:<sp/>return<sp/>#X<sp/>;break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>hipMemcpyStr(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>memKind)</highlight></codeline>
<codeline lineno="1717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(memKind)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_STRING(hipMemcpyHostToHost);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_STRING(hipMemcpyHostToDevice);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_STRING(hipMemcpyDeviceToHost);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_STRING(hipMemcpyDeviceToDevice);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_STRING(hipMemcpyDefault);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;unknown<sp/>memcpyKind&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>hcMemcpyStr(hc::hcCommandKind<sp/>memKind)</highlight></codeline>
<codeline lineno="1729"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehc" kindref="compound">hc</ref>;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(memKind)<sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_STRING(hcMemcpyHostToHost);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_STRING(hcMemcpyHostToDevice);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_STRING(hcMemcpyDeviceToHost);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_STRING(hcMemcpyDeviceToDevice);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CASE_STRING(hcMemcpyDefault);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;unknown<sp/>memcpyKind&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Resolve<sp/>hipMemcpyDefault<sp/>to<sp/>a<sp/>known<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ihipStream_t::resolveMemcpyDirection(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>srcInDeviceMem,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dstInDeviceMem)</highlight></codeline>
<codeline lineno="1745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>hipMemcpyKind<sp/>kind<sp/>=<sp/>hipMemcpyDefault;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>srcInDeviceMem<sp/><sp/>&amp;&amp;<sp/><sp/>dstInDeviceMem)<sp/>{<sp/>kind<sp/>=<sp/>hipMemcpyDeviceToDevice;<sp/>}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>srcInDeviceMem<sp/><sp/>&amp;&amp;<sp/>!dstInDeviceMem)<sp/>{<sp/>kind<sp/>=<sp/>hipMemcpyDeviceToHost;<sp/>}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!srcInDeviceMem<sp/><sp/>&amp;&amp;<sp/>!dstInDeviceMem)<sp/>{<sp/>kind<sp/>=<sp/>hipMemcpyHostToHost;<sp/>}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!srcInDeviceMem<sp/><sp/>&amp;&amp;<sp/><sp/>dstInDeviceMem)<sp/>{<sp/>kind<sp/>=<sp/>hipMemcpyHostToDevice;<sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(kind<sp/>!=<sp/>hipMemcpyDefault);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kind;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hipMemKind<sp/>must<sp/>be<sp/>&quot;resolved&quot;<sp/>to<sp/>a<sp/>specific<sp/>direction<sp/>-<sp/>cannot<sp/>be<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::resolveHcMemcpyDirection(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>hipMemKind,</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hc::AmPointerInfo<sp/>*dstPtrInfo,</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hc::AmPointerInfo<sp/>*srcPtrInfo,</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc::hcCommandKind<sp/>*hcCopyDir,</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>**copyDevice,</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*forceUnpinnedCopy)</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>what<sp/>the<sp/>user<sp/>tells<sp/>us<sp/>and<sp/>always<sp/>resolve<sp/>the<sp/>direction:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>apps<sp/>apparently<sp/>rely<sp/>on<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>hipMemKind<sp/>=<sp/>resolveMemcpyDirection(srcPtrInfo-&gt;_isInDeviceMem,<sp/>dstPtrInfo-&gt;_isInDeviceMem);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(hipMemKind)<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipMemcpyHostToHost:<sp/><sp/><sp/><sp/><sp/>*hcCopyDir<sp/>=<sp/>hc::hcMemcpyHostToHost;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipMemcpyHostToDevice:<sp/><sp/><sp/>*hcCopyDir<sp/>=<sp/>hc::hcMemcpyHostToDevice;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipMemcpyDeviceToHost:<sp/><sp/><sp/>*hcCopyDir<sp/>=<sp/>hc::hcMemcpyDeviceToHost;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>hipMemcpyDeviceToDevice:<sp/>*hcCopyDir<sp/>=<sp/>hc::hcMemcpyDeviceToDevice;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classihipException" kindref="compound">ihipException</ref>(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a44f847c5914be2177feac107dcb096d1" kindref="member">hipErrorRuntimeOther</ref>);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcPtrInfo-&gt;_isInDeviceMem)<sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*copyDevice<sp/><sp/>=<sp/>ihipGetPrimaryCtx(srcPtrInfo-&gt;_appId);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstPtrInfo-&gt;_isInDeviceMem)<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*copyDevice<sp/><sp/>=<sp/>ihipGetPrimaryCtx(dstPtrInfo-&gt;_appId);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*copyDevice<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>*forceUnpinnedCopy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canSeeMemory(*copyDevice,<sp/>dstPtrInfo,<sp/>srcPtrInfo))<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_FORCE_P2P_HOST<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*forceUnpinnedCopy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf<sp/>(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;Copy<sp/>engine<sp/>(dev:%d<sp/>agent=0x%lx)<sp/>can<sp/>see<sp/>src<sp/>and<sp/>dst<sp/>but<sp/>HIP_FORCE_P2P_HOST=0,<sp/>forcing<sp/>copy<sp/>through<sp/>staging<sp/>buffers.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*copyDevice<sp/>?<sp/>(*copyDevice)-&gt;getDeviceNum()<sp/>:<sp/>-1,<sp/></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*copyDevice<sp/>?<sp/>(*copyDevice)-&gt;getDevice()-&gt;_hsaAgent.handle<sp/>:<sp/>0x0);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf<sp/>(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;Copy<sp/>engine<sp/>(dev:%d<sp/>agent=0x%lx)<sp/>can<sp/>see<sp/>src<sp/>and<sp/>dst.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*copyDevice<sp/>?<sp/>(*copyDevice)-&gt;getDeviceNum()<sp/>:<sp/>-1,<sp/></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*copyDevice<sp/>?<sp/>(*copyDevice)-&gt;getDevice()-&gt;_hsaAgent.handle<sp/>:<sp/>0x0);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*forceUnpinnedCopy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf<sp/>(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;P2P:<sp/>Copy<sp/>engine(dev:%d<sp/>agent=0x%lx)<sp/>cannot<sp/>see<sp/>both<sp/>host<sp/>and<sp/>device<sp/>pointers<sp/>-<sp/>forcing<sp/>copy<sp/>with<sp/>unpinned<sp/>engine.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*copyDevice<sp/>?<sp/>(*copyDevice)-&gt;getDeviceNum()<sp/>:<sp/>-1,<sp/></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*copyDevice<sp/>?<sp/>(*copyDevice)-&gt;getDevice()-&gt;_hsaAgent.handle<sp/>:<sp/>0x0);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_FAIL_SOC<sp/>&amp;<sp/>0x2)<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;HIP_FAIL_SOC:<sp/><sp/>P2P:<sp/>copy<sp/>engine(dev:%d<sp/>agent=0x%lx)<sp/>cannot<sp/>see<sp/>both<sp/>host<sp/>and<sp/>device<sp/>pointers<sp/>-<sp/>forcing<sp/>copy<sp/>with<sp/>unpinned<sp/>engine.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*copyDevice<sp/>?<sp/>(*copyDevice)-&gt;getDeviceNum()<sp/>:<sp/>-1,<sp/></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*copyDevice<sp/>?<sp/>(*copyDevice)-&gt;getDevice()-&gt;_hsaAgent.handle<sp/>:<sp/>0x0);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classihipException" kindref="compound">ihipException</ref>(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a44f847c5914be2177feac107dcb096d1" kindref="member">hipErrorRuntimeOther</ref>);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printPointerInfo(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>dbFlag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hc::AmPointerInfo<sp/>&amp;ptrInfo)</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>tprintf<sp/>(dbFlag,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s=%p<sp/>baseHost=%p<sp/>baseDev=%p<sp/>sz=%zu<sp/>home_dev=%d<sp/>tracked=%d<sp/>isDevMem=%d<sp/>registered=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag,<sp/>ptr,</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrInfo._hostPointer,<sp/>ptrInfo._devicePointer,<sp/>ptrInfo._sizeBytes,</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrInfo._appId,<sp/>ptrInfo._sizeBytes<sp/>!=<sp/>0,<sp/>ptrInfo._isInDeviceMem,<sp/>!ptrInfo._isAmManaged);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>pointer-info<sp/>as<sp/>returned<sp/>by<sp/>HC<sp/>refers<sp/>to<sp/>the<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>routine<sp/>modifies<sp/>the<sp/>pointer-info<sp/>so<sp/>it<sp/>appears<sp/>to<sp/>refer<sp/>to<sp/>the<sp/>specific<sp/>ptr<sp/>and<sp/>sizeBytes.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>-remove<sp/>this<sp/>when<sp/>HCC<sp/>uses<sp/>HSA<sp/>pointer<sp/>info<sp/>functions<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tailorPtrInfo(hc::AmPointerInfo<sp/>*ptrInfo,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes)</highlight></codeline>
<codeline lineno="1829"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptrc<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(ptr);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptrInfo-&gt;_sizeBytes<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invalid<sp/>ptrInfo,<sp/>don&apos;t<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptrInfo-&gt;_isInDeviceMem)<sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(ptrInfo-&gt;_devicePointer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ptrdiff_t<sp/>diff<sp/>=<sp/>ptrc<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(ptrInfo-&gt;_devicePointer);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>:<sp/>assert-&gt;<sp/>runtime<sp/>assert<sp/>that<sp/>only<sp/>appears<sp/>in<sp/>debug<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(diff<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(diff<sp/>&lt;=<sp/>ptrInfo-&gt;_sizeBytes);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrInfo-&gt;_devicePointer<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(ptr);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptrInfo-&gt;_hostPointer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrInfo-&gt;_hostPointer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptrInfo-&gt;_hostPointer)<sp/>+<sp/>diff;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(ptrInfo-&gt;_hostPointer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ptrdiff_t<sp/>diff<sp/>=<sp/>ptrc<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(ptrInfo-&gt;_hostPointer);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>:<sp/>assert-&gt;<sp/>runtime<sp/>assert<sp/>that<sp/>only<sp/>appears<sp/>in<sp/>debug<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(diff<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(diff<sp/>&lt;=<sp/>ptrInfo-&gt;_sizeBytes);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrInfo-&gt;_hostPointer<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptrInfo-&gt;_devicePointer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrInfo-&gt;_devicePointer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptrInfo-&gt;_devicePointer)<sp/>+<sp/>diff;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(sizeBytes<sp/>&lt;=<sp/>ptrInfo-&gt;_sizeBytes);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrInfo-&gt;_sizeBytes<sp/>=<sp/>sizeBytes;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getTailoredPtrInfo(hc::AmPointerInfo<sp/>*ptrInfo,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes)</highlight></codeline>
<codeline lineno="1870"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tracked<sp/>=<sp/>(hc::am_memtracker_getinfo(ptrInfo,<sp/>ptr)<sp/>==<sp/>AM_SUCCESS);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tracked)<sp/><sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tailorPtrInfo(ptrInfo,<sp/>ptr,<sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tracked;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>:<sp/>For<sp/>registered<sp/>and<sp/>host<sp/>memory,<sp/>if<sp/>the<sp/>portable<sp/>flag<sp/>is<sp/>set,<sp/>we<sp/>need<sp/>to<sp/>recognize<sp/>that<sp/>and<sp/>perform<sp/>appropriate<sp/>copy<sp/>operation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>What<sp/>can<sp/>happen<sp/>now<sp/>is<sp/>that<sp/>Portable<sp/>memory<sp/>is<sp/>mapped<sp/>into<sp/>multiple<sp/>devices<sp/>but<sp/>Peer<sp/>access<sp/>is<sp/>not<sp/>enabled.<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>peer<sp/>detection<sp/>logic<sp/>doesn&apos;t<sp/>see<sp/>that<sp/>the<sp/>memory<sp/>is<sp/>already<sp/>mapped<sp/>and<sp/>so<sp/>tries<sp/>to<sp/>use<sp/>an<sp/>unpinned<sp/>copy<sp/>algorithm.<sp/><sp/>If<sp/>this<sp/>is<sp/>PinInPlace,<sp/>then<sp/>an<sp/>error<sp/>can<sp/>occur.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>track<sp/>Portable<sp/>flag<sp/>correctly<sp/>or<sp/>use<sp/>new<sp/>RT<sp/>functionality<sp/>to<sp/>query<sp/>the<sp/>peer<sp/>status<sp/>for<sp/>the<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>remove<sp/>kind<sp/>parm<sp/>from<sp/>here<sp/>or<sp/>use<sp/>it<sp/>below?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::locked_copySync(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>kind,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resolveOn)</highlight></codeline>
<codeline lineno="1888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*ctx<sp/>=<sp/>this-&gt;getCtx();</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref><sp/>*device<sp/>=<sp/>ctx-&gt;getDevice();</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classihipException" kindref="compound">ihipException</ref>(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a07ab9b704ea693c1781a52741c60cd0d" kindref="member">hipErrorInvalidDevice</ref>);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/>hc::accelerator<sp/>acc;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__hcc_workweek__<sp/>&gt;=<sp/>17332)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>dstPtrInfo(NULL,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>srcPtrInfo(NULL,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>dstPtrInfo(NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>srcPtrInfo(NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dstTracked<sp/>=<sp/>getTailoredPtrInfo(&amp;dstPtrInfo,<sp/>dst,<sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>srcTracked<sp/>=<sp/>getTailoredPtrInfo(&amp;srcPtrInfo,<sp/>src,<sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>code<sp/>in<sp/>HCC<sp/>and<sp/>in<sp/>printPointerInfo<sp/>uses<sp/>_sizeBytes==0<sp/>as<sp/>an<sp/>indication<sp/>ptr<sp/>is<sp/>not<sp/>valid,<sp/>so<sp/>check<sp/>it<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dstTracked)<sp/>{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(dstPtrInfo._sizeBytes<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!srcTracked)<sp/>{</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(srcPtrInfo._sizeBytes<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>hc::hcCommandKind<sp/>hcCopyDir;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*copyDevice;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forceUnpinnedCopy;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>resolveHcMemcpyDirection(kind,<sp/>&amp;dstPtrInfo,<sp/>&amp;srcPtrInfo,<sp/>&amp;hcCopyDir,<sp/>&amp;copyDevice,<sp/>&amp;forceUnpinnedCopy);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit<sp/>(_criticalData);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf<sp/>(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;copySync<sp/>copyDev:%d<sp/><sp/>dst=%p<sp/>(phys_dev:%d,<sp/>isDevMem:%d)<sp/><sp/>src=%p(phys_dev:%d,<sp/>isDevMem:%d)<sp/><sp/><sp/>sz=%zu<sp/>dir=%s<sp/>forceUnpinnedCopy=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyDevice<sp/>?<sp/>copyDevice-&gt;getDeviceNum():-1,</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst,<sp/>dstPtrInfo._appId,<sp/>dstPtrInfo._isInDeviceMem,</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src,<sp/>srcPtrInfo._appId,<sp/>srcPtrInfo._isInDeviceMem,</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeBytes,<sp/>hcMemcpyStr(hcCopyDir),<sp/>forceUnpinnedCopy);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printPointerInfo(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dst&quot;</highlight><highlight class="normal">,<sp/>dst,<sp/>dstPtrInfo);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printPointerInfo(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>src&quot;</highlight><highlight class="normal">,<sp/>src,<sp/>srcPtrInfo);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crit-&gt;_av.copy_ext(src,<sp/>dst,<sp/>sizeBytes,<sp/>hcCopyDir,<sp/>srcPtrInfo,<sp/>dstPtrInfo,<sp/>copyDevice<sp/>?<sp/>&amp;copyDevice-&gt;getDevice()-&gt;_acc<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>forceUnpinnedCopy);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::addSymbolPtrToTracker(hc::accelerator&amp;<sp/>acc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes)<sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__hcc_workweek__<sp/>&gt;=<sp/>17332)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/>hc::AmPointerInfo<sp/>ptrInfo(NULL,<sp/>ptr,<sp/>ptr,<sp/>sizeBytes,<sp/>acc,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/>hc::AmPointerInfo<sp/>ptrInfo(NULL,<sp/>ptr,<sp/>sizeBytes,<sp/>acc,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/>hc::am_memtracker_add(ptr,<sp/>ptrInfo);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::lockedSymbolCopySync(hc::accelerator<sp/>&amp;acc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>kind)</highlight></codeline>
<codeline lineno="1947"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kind<sp/>==<sp/>hipMemcpyHostToHost){</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>acc.memcpy_symbol(dst,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)src,<sp/>sizeBytes,<sp/>offset,<sp/>Kalmar::hcMemcpyHostToHost);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kind<sp/>==<sp/>hipMemcpyHostToDevice){</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>acc.memcpy_symbol(dst,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)src,<sp/>sizeBytes,<sp/>offset);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kind<sp/>==<sp/>hipMemcpyDeviceToDevice){</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>acc.memcpy_symbol(dst,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)src,<sp/>sizeBytes,<sp/>offset,<sp/>Kalmar::hcMemcpyDeviceToDevice);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kind<sp/>==<sp/>hipMemcpyDeviceToHost){</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>acc.memcpy_symbol((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>src,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dst,<sp/>sizeBytes,<sp/>offset,<sp/>Kalmar::hcMemcpyDeviceToHost);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::lockedSymbolCopyAsync(hc::accelerator<sp/>&amp;acc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>kind)</highlight></codeline>
<codeline lineno="1963"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>review<sp/>-<sp/>this<sp/>looks<sp/>broken<sp/>,<sp/>should<sp/>not<sp/>be<sp/>adding<sp/>pointers<sp/>to<sp/>tracker<sp/>dynamically:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kind<sp/>==<sp/>hipMemcpyHostToDevice)<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__hcc_workweek__<sp/>&gt;=<sp/>17332)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>srcPtrInfo(NULL,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>srcPtrInfo(NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>srcTracked<sp/>=<sp/>(hc::am_memtracker_getinfo(&amp;srcPtrInfo,<sp/>src)<sp/>==<sp/>AM_SUCCESS);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(srcTracked)<sp/>{</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSymbolPtrToTracker(acc,<sp/>dst,<sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locked_getAv()-&gt;copy_async((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)src,<sp/>dst,<sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;wait(crit);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc.memcpy_symbol(dst,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)src,<sp/>sizeBytes,<sp/>offset);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kind<sp/>==<sp/>hipMemcpyDeviceToHost)<sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__hcc_workweek__<sp/>&gt;=<sp/>17332)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>dstPtrInfo(NULL,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>dstPtrInfo(NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dstTracked<sp/>=<sp/>(hc::am_memtracker_getinfo(&amp;dstPtrInfo,<sp/>dst)<sp/>==<sp/>AM_SUCCESS);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dstTracked)<sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSymbolPtrToTracker(acc,<sp/>src,<sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locked_getAv()-&gt;copy_async((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)src,<sp/>dst,<sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;wait(crit);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc.memcpy_symbol((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)src,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)dst,<sp/>sizeBytes,<sp/>offset,<sp/>Kalmar::hcMemcpyDeviceToHost);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipStream_t::locked_copyAsync(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>kind)</highlight></codeline>
<codeline lineno="2001"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*ctx<sp/>=<sp/>this-&gt;getCtx();</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ctx<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>||<sp/>(ctx-&gt;getDevice()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf<sp/>(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;locked_copyAsync<sp/>bad<sp/>ctx<sp/>or<sp/>device\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classihipException" kindref="compound">ihipException</ref>(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a07ab9b704ea693c1781a52741c60cd0d" kindref="member">hipErrorInvalidDevice</ref>);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kind<sp/>==<sp/>hipMemcpyHostToHost)<sp/>{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf<sp/>(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;locked_copyAsync:<sp/>H2H<sp/>with<sp/>memcpy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>consider<sp/>if<sp/>we<sp/>want<sp/>to<sp/>perhaps<sp/>use<sp/>the<sp/>GPU<sp/>SDMA<sp/>engines<sp/>anyway,<sp/>to<sp/>avoid<sp/>the<sp/>host-side<sp/>sync<sp/>here<sp/>and<sp/>keep<sp/>everything<sp/>flowing<sp/>on<sp/>the<sp/>GPU.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>this<sp/>is<sp/>a<sp/>CPU<sp/>op,<sp/>we<sp/>need<sp/>to<sp/>wait<sp/>until<sp/>all</highlight></codeline>
<codeline lineno="2015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>commands<sp/>in<sp/>current<sp/>stream<sp/>are<sp/>finished.</highlight></codeline>
<codeline lineno="2016"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;wait(crit);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dst,<sp/>src,<sp/>sizeBytes);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc::accelerator<sp/>acc;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__hcc_workweek__<sp/>&gt;=<sp/>17332)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>dstPtrInfo(NULL,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>srcPtrInfo(NULL,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>dstPtrInfo(NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc::AmPointerInfo<sp/>srcPtrInfo(NULL,<sp/>NULL,<sp/>0,<sp/>acc,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dstTracked<sp/>=<sp/>getTailoredPtrInfo(&amp;dstPtrInfo,<sp/>dst,<sp/>sizeBytes);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>srcTracked<sp/>=<sp/>getTailoredPtrInfo(&amp;srcPtrInfo,<sp/>src,<sp/>sizeBytes);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc::hcCommandKind<sp/>hcCopyDir;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*copyDevice;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forceUnpinnedCopy;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolveHcMemcpyDirection(kind,<sp/>&amp;dstPtrInfo,<sp/>&amp;srcPtrInfo,<sp/>&amp;hcCopyDir,<sp/>&amp;copyDevice,<sp/>&amp;forceUnpinnedCopy);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf<sp/>(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;copyASync<sp/>copyDev:%d<sp/><sp/>dst=%p<sp/>(phys_dev:%d,<sp/>isDevMem:%d)<sp/><sp/>src=%p(phys_dev:%d,<sp/>isDevMem:%d)<sp/><sp/><sp/>sz=%zu<sp/>dir=%s<sp/>forceUnpinnedCopy=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyDevice<sp/>?<sp/>copyDevice-&gt;getDeviceNum():-1,</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst,<sp/>dstPtrInfo._appId,<sp/>dstPtrInfo._isInDeviceMem,</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src,<sp/>srcPtrInfo._appId,<sp/>srcPtrInfo._isInDeviceMem,</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeBytes,<sp/>hcMemcpyStr(hcCopyDir),<sp/>forceUnpinnedCopy);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printPointerInfo(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dst&quot;</highlight><highlight class="normal">,<sp/>dst,<sp/>dstPtrInfo);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printPointerInfo(DB_COPY,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>src&quot;</highlight><highlight class="normal">,<sp/>src,<sp/>srcPtrInfo);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;tracked&quot;<sp/>really<sp/>indicates<sp/>if<sp/>the<sp/>pointer&apos;s<sp/>virtual<sp/>address<sp/>is<sp/>available<sp/>in<sp/>the<sp/>GPU<sp/>address<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>both<sp/>pointers<sp/>are<sp/>not<sp/>tracked,<sp/>we<sp/>need<sp/>to<sp/>fall<sp/>back<sp/>to<sp/>a<sp/>sync<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstTracked<sp/>&amp;&amp;<sp/>srcTracked<sp/>&amp;&amp;<sp/>!forceUnpinnedCopy<sp/>&amp;&amp;<sp/>copyDevice</highlight><highlight class="comment">/*code<sp/>below<sp/>assumes<sp/>this<sp/>is<sp/>!nullptr*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>fast<sp/>asynchronous<sp/>copy<sp/>-<sp/>we<sp/>know<sp/>copyDevice<sp/>!=<sp/>NULL<sp/>based<sp/>on<sp/>check<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_FORCE_SYNC_COPY)<sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crit-&gt;_av.copy_ext<sp/><sp/><sp/><sp/><sp/><sp/>(src,<sp/>dst,<sp/>sizeBytes,<sp/>hcCopyDir,<sp/>srcPtrInfo,<sp/>dstPtrInfo,<sp/>&amp;copyDevice-&gt;getDevice()-&gt;_acc,<sp/>forceUnpinnedCopy);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crit-&gt;_av.copy_async_ext(src,<sp/>dst,<sp/>sizeBytes,<sp/>hcCopyDir,<sp/>srcPtrInfo,<sp/>dstPtrInfo,<sp/>&amp;copyDevice-&gt;getDevice()-&gt;_acc);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(Kalmar::runtime_exception)<sp/>{</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classihipException" kindref="compound">ihipException</ref>(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a44f847c5914be2177feac107dcb096d1" kindref="member">hipErrorRuntimeOther</ref>);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_API_BLOCKING)<sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprintf(DB_SYNC,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>LAUNCH_BLOCKING<sp/>for<sp/>completion<sp/>of<sp/>hipMemcpyAsync(sz=%zu)\n&quot;</highlight><highlight class="normal">,<sp/>ToString(</highlight><highlight class="keyword">this</highlight><highlight class="normal">).c_str(),<sp/>sizeBytes);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;wait(crit);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_FAIL_SOC<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;HIP_FAIL_SOC<sp/>failed,<sp/>async_copy<sp/>requested<sp/>but<sp/>could<sp/>not<sp/>be<sp/>completed<sp/>since<sp/>src<sp/>or<sp/>dst<sp/>not<sp/>accesible<sp/>to<sp/>copy<sp/>agent\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;copyASync<sp/>copyDev:%d<sp/><sp/>dst=%p<sp/>(phys_dev:%d,<sp/>isDevMem:%d)<sp/><sp/>src=%p(phys_dev:%d,<sp/>isDevMem:%d)<sp/><sp/><sp/>sz=%zu<sp/>dir=%s<sp/>forceUnpinnedCopy=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyDevice<sp/>?<sp/>copyDevice-&gt;getDeviceNum():-1,</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst,<sp/>dstPtrInfo._appId,<sp/>dstPtrInfo._isInDeviceMem,</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src,<sp/>srcPtrInfo._appId,<sp/>srcPtrInfo._isInDeviceMem,</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeBytes,<sp/>hcMemcpyStr(hcCopyDir),<sp/>forceUnpinnedCopy);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dst=%p<sp/>baseHost=%p<sp/>baseDev=%p<sp/>sz=%zu<sp/>home_dev=%d<sp/>tracked=%d<sp/>isDevMem=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst,<sp/>dstPtrInfo._hostPointer,<sp/>dstPtrInfo._devicePointer,<sp/>dstPtrInfo._sizeBytes,</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtrInfo._appId,<sp/>dstTracked,<sp/>dstPtrInfo._isInDeviceMem);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>src=%p<sp/>baseHost=%p<sp/>baseDev=%p<sp/>sz=%zu<sp/>home_dev=%d<sp/>tracked=%d<sp/>isDevMem=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src,<sp/>srcPtrInfo._hostPointer,<sp/>srcPtrInfo._devicePointer,<sp/>srcPtrInfo._sizeBytes,</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcPtrInfo._appId,<sp/>srcTracked,<sp/>srcPtrInfo._isInDeviceMem);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classihipException" kindref="compound">ihipException</ref>(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a44f847c5914be2177feac107dcb096d1" kindref="member">hipErrorRuntimeOther</ref>);</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>slow<sp/>synchronous<sp/>copy:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLockedAccessor" kindref="compound">LockedAccessor_StreamCrit_t</ref><sp/>crit(_criticalData);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crit-&gt;_av.copy_ext(src,<sp/>dst,<sp/>sizeBytes,<sp/>hcCopyDir,<sp/>srcPtrInfo,<sp/>dstPtrInfo,<sp/>copyDevice<sp/>?<sp/>&amp;copyDevice-&gt;getDevice()-&gt;_acc<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>forceUnpinnedCopy);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight><highlight class="comment">//Profiler,<sp/>really<sp/>these<sp/>should<sp/>live<sp/>elsewhere:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref><sp/><ref refid="group__Profiler_1ga40aa20d731f9c8f0586127d589759e1d" kindref="member">hipProfilerStart</ref>()</highlight></codeline>
<codeline lineno="2102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/>HIP_INIT_API();</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>COMPILE_HIP_ATP_MARKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>amdtResumeProfiling(AMDT_ALL_PROFILING);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipLogStatus(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aadfbdb847b149723c684ebd764556063" kindref="member">hipSuccess</ref>);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref><sp/><ref refid="group__Profiler_1ga777994cae0f7bdef24131fc1f3ed626e" kindref="member">hipProfilerStop</ref>()</highlight></codeline>
<codeline lineno="2113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>HIP_INIT_API();</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>COMPILE_HIP_ATP_MARKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>amdtStopProfiling(AMDT_ALL_PROFILING);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipLogStatus(<ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aadfbdb847b149723c684ebd764556063" kindref="member">hipSuccess</ref>);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HCC-specific<sp/>accessor<sp/>functions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref><sp/><ref refid="group__HCC-specific_1ga0d24b3157fd1b16d38672bb157ec4cd4" kindref="member">hipHccGetAccelerator</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceId,<sp/>hc::accelerator<sp/>*acc)</highlight></codeline>
<codeline lineno="2129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/>HIP_INIT_API(deviceId,<sp/>acc);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classihipDevice__t" kindref="compound">ihipDevice_t</ref><sp/>*device<sp/>=<sp/>ihipGetDevice(deviceId);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref><sp/>err;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594a07ab9b704ea693c1781a52741c60cd0d" kindref="member">hipErrorInvalidDevice</ref>;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*acc<sp/>=<sp/>device-&gt;_acc;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aadfbdb847b149723c684ebd764556063" kindref="member">hipSuccess</ref>;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipLogStatus(err);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref><sp/><ref refid="group__HCC-specific_1ga1a7087ea9c3c3323270d7cce73650b44" kindref="member">hipHccGetAcceleratorView</ref>(<ref refid="classihipStream__t" kindref="compound">hipStream_t</ref><sp/>stream,<sp/>hc::accelerator_view<sp/>**av)</highlight></codeline>
<codeline lineno="2146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/>HIP_INIT_API(stream,<sp/>av);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream<sp/>==<sp/>hipStreamNull<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classihipCtx__t" kindref="compound">ihipCtx_t</ref><sp/>*device<sp/>=<sp/>ihipGetTlsDefaultCtx();</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>device-&gt;_defaultStream;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>*av<sp/>=<sp/>stream-&gt;locked_getAv();<sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>review.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref><sp/>err<sp/>=<sp/><ref refid="group__GlobalDefs_1ggadf5010f6e140a53ecbdf949e73e87594aadfbdb847b149723c684ebd764556063" kindref="member">hipSuccess</ref>;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipLogStatus(err);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="comment">//TODO<sp/>-<sp/>add<sp/>a<sp/>contect<sp/>sequence<sp/>number<sp/>for<sp/>debug.<sp/>Print<sp/>operator&lt;&lt;<sp/>ctx:0.1<sp/>(device.ctx)</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_hcc.cpp"/>
  </compounddef>
</doxygen>
