<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="group__API" kind="group">
    <compoundname>API</compoundname>
    <title>HIP API</title>
    <innergroup refid="group__Device">Device Management</innergroup>
    <innergroup refid="group__Error">Error Handling</innergroup>
    <innergroup refid="group__Stream">Stream Management</innergroup>
    <innergroup refid="group__Event">Event Management</innergroup>
    <innergroup refid="group__Memory">Memory Management</innergroup>
    <innergroup refid="group__PeerToPeer">Device Memory Access</innergroup>
    <innergroup refid="group__Driver">Initialization and Version</innergroup>
    <innergroup refid="group__Profiler">Control</innergroup>
    <innergroup refid="group__HCC__Specific">HCC-Specific Accessors</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__API_1gafd8c80f7e3b6426a630fff768409be70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref></type>
        <definition>hipError_t hipIpcGetMemHandle</definition>
        <argsstring>(hipIpcMemHandle_t *handle, void *devPtr)</argsstring>
        <name>hipIpcGetMemHandle</name>
        <param>
          <type><ref refid="structhipIpcMemHandle__st" kindref="compound">hipIpcMemHandle_t</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>devPtr</declname>
        </param>
        <briefdescription>
<para>Gets an interprocess memory handle for an existing device memory allocation. </para>        </briefdescription>
        <detaileddescription>
<para>Takes a pointer to the base of an existing device memory allocation created with hipMalloc and exports it for use in another process. This is a lightweight operation and may be called multiple times on an allocation without adverse effects.</para><para>If a region of memory is freed with hipFree and a subsequent call to hipMalloc returns memory with the same device address, hipIpcGetMemHandle will return a unique handle for the new memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to user allocated hipIpcMemHandle to return the handle in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>- Base pointer to previously allocated device memory</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorInvalidResourceHandle, hipErrorMemoryAllocation, hipErrorMapBufferObjectFailed, </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2091" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_memory.cpp" bodystart="1584" bodyend="1618"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga2ada334c986e10805d58167e260cb0df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref></type>
        <definition>hipError_t hipIpcOpenMemHandle</definition>
        <argsstring>(void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)</argsstring>
        <name>hipIpcOpenMemHandle</name>
        <param>
          <type>void **</type>
          <declname>devPtr</declname>
        </param>
        <param>
          <type><ref refid="structhipIpcMemHandle__st" kindref="compound">hipIpcMemHandle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Opens an interprocess memory handle exported from another process and returns a device pointer usable in the local process. </para>        </briefdescription>
        <detaileddescription>
<para>Maps memory exported from another process with hipIpcGetMemHandle into the current device address space. For contexts on different devices hipIpcOpenMemHandle can attempt to enable peer access between the devices as if the user called hipDeviceEnablePeerAccess. This behavior is controlled by the hipIpcMemLazyEnablePeerAccess flag. hipDeviceCanAccessPeer can determine if a mapping is possible.</para><para>Contexts that may open hipIpcMemHandles are restricted in the following way. hipIpcMemHandles from each device in a given process may only be opened by one context per device per other process.</para><para>Memory returned from hipIpcOpenMemHandle must be freed with hipIpcCloseMemHandle.</para><para>Calling hipFree on an exported memory region before calling hipIpcCloseMemHandle in the importing context will result in undefined behavior.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>- Returned device pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>- hipIpcMemHandle to open </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>- Flags for this operation. Must be specified as hipIpcMemLazyEnablePeerAccess</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorMapBufferObjectFailed, hipErrorInvalidResourceHandle, hipErrorTooManyPeers</para></simplesect>
<simplesect kind="note"><para>No guarantees are made about the address returned in <computeroutput>*devPtr</computeroutput>. In particular, multiple processes may not receive the same address for the same <computeroutput>handle</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2129" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_memory.cpp" bodystart="1620" bodyend="1649"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gac2db0688a6a471e17ca631977e199da7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__GlobalDefs_1gadf5010f6e140a53ecbdf949e73e87594" kindref="member">hipError_t</ref></type>
        <definition>hipError_t hipIpcCloseMemHandle</definition>
        <argsstring>(void *devPtr)</argsstring>
        <name>hipIpcCloseMemHandle</name>
        <param>
          <type>void *</type>
          <declname>devPtr</declname>
        </param>
        <briefdescription>
<para>Close memory mapped with hipIpcOpenMemHandle. </para>        </briefdescription>
        <detaileddescription>
<para>Unmaps memory returnd by hipIpcOpenMemHandle. The original allocation in the exporting process as well as imported mappings in other processes will be unaffected.</para><para>Any resources used to enable peer access will be freed if this is the last mapping using them.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>- Device pointer returned by hipIpcOpenMemHandle</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorMapBufferObjectFailed, hipErrorInvalidResourceHandle, </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2150" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/hip_memory.cpp" bodystart="1651" bodyend="1667"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Defines the HIP API. See the individual sections for more information. </para>    </detaileddescription>
  </compounddef>
</doxygen>
