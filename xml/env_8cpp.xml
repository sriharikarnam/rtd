<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="env_8cpp" kind="file" language="C++">
    <compoundname>env.cpp</compoundname>
    <includes refid="hip__hcc__internal_8h" local="yes">hip_hcc_internal.h</includes>
    <includes refid="trace__helper_8h" local="yes">trace_helper.h</includes>
    <includes refid="env_8h" local="yes">env.h</includes>
    <incdepgraph>
      <node id="639">
        <label>hip/hcc_detail/hip_runtime_api.h</label>
        <link refid="hcc__detail_2hip__runtime__api_8h"/>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="640" relation="include">
        </childnode>
        <childnode refid="641" relation="include">
        </childnode>
        <childnode refid="638" relation="include">
        </childnode>
        <childnode refid="642" relation="include">
        </childnode>
        <childnode refid="643" relation="include">
        </childnode>
      </node>
      <node id="657">
        <label>list</label>
      </node>
      <node id="647">
        <label>hip/hcc_detail/texture_types.h</label>
        <link refid="hcc__detail_2texture__types_8h_source"/>
        <childnode refid="642" relation="include">
        </childnode>
      </node>
      <node id="665">
        <label>iomanip</label>
      </node>
      <node id="652">
        <label>hip/hcc_detail/device_functions.h</label>
        <link refid="hcc__detail_2device__functions_8h_source"/>
        <childnode refid="628" relation="include">
        </childnode>
        <childnode refid="651" relation="include">
        </childnode>
      </node>
      <node id="626">
        <label>hsa/hsa.h</label>
      </node>
      <node id="632">
        <label>assert.h</label>
      </node>
      <node id="649">
        <label>hip/hcc_detail/math_functions.h</label>
        <link refid="hcc__detail_2math__functions_8h_source"/>
        <childnode refid="650" relation="include">
        </childnode>
        <childnode refid="628" relation="include">
        </childnode>
        <childnode refid="651" relation="include">
        </childnode>
        <childnode refid="652" relation="include">
        </childnode>
      </node>
      <node id="650">
        <label>kalmar_math.h</label>
      </node>
      <node id="645">
        <label>hip/hcc_detail/channel_descriptor.h</label>
        <link refid="hcc__detail_2channel__descriptor_8h_source"/>
        <childnode refid="642" relation="include">
        </childnode>
        <childnode refid="646" relation="include">
        </childnode>
      </node>
      <node id="629">
        <label>stdint.h</label>
      </node>
      <node id="631">
        <label>stdlib.h</label>
      </node>
      <node id="648">
        <label>grid_launch.h</label>
      </node>
      <node id="666">
        <label>string</label>
      </node>
      <node id="654">
        <label>hc_short_vector.hpp</label>
      </node>
      <node id="642">
        <label>hip/hcc_detail/driver_types.h</label>
        <link refid="hcc__detail_2driver__types_8h_source"/>
      </node>
      <node id="637">
        <label>stddef.h</label>
      </node>
      <node id="625">
        <label>hc.hpp</label>
      </node>
      <node id="644">
        <label>limits.h</label>
      </node>
      <node id="627">
        <label>hsa/hsa_ext_amd.h</label>
      </node>
      <node id="663">
        <label>env.h</label>
        <link refid="env_8h_source"/>
      </node>
      <node id="655">
        <label>hip_util.h</label>
        <link refid="hip__util_8h_source"/>
        <childnode refid="632" relation="include">
        </childnode>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="640" relation="include">
        </childnode>
        <childnode refid="656" relation="include">
        </childnode>
        <childnode refid="657" relation="include">
        </childnode>
        <childnode refid="658" relation="include">
        </childnode>
        <childnode refid="659" relation="include">
        </childnode>
        <childnode refid="660" relation="include">
        </childnode>
        <childnode refid="661" relation="include">
        </childnode>
        <childnode refid="662" relation="include">
        </childnode>
      </node>
      <node id="634">
        <label>hip/hcc_detail/hip_runtime.h</label>
        <link refid="hcc__detail_2hip__runtime_8h"/>
        <childnode refid="635" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="638" relation="include">
        </childnode>
        <childnode refid="648" relation="include">
        </childnode>
        <childnode refid="641" relation="include">
        </childnode>
        <childnode refid="649" relation="include">
        </childnode>
        <childnode refid="652" relation="include">
        </childnode>
        <childnode refid="653" relation="include">
        </childnode>
      </node>
      <node id="658">
        <label>sys/types.h</label>
      </node>
      <node id="636">
        <label>string.h</label>
      </node>
      <node id="628">
        <label>hip/hip_runtime.h</label>
        <link refid="hip__runtime_8h_source"/>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="631" relation="include">
        </childnode>
        <childnode refid="632" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="638" relation="include">
        </childnode>
        <childnode refid="651" relation="include">
        </childnode>
      </node>
      <node id="659">
        <label>unistd.h</label>
      </node>
      <node id="661">
        <label>vector</label>
      </node>
      <node id="646">
        <label>hip/hcc_detail/hip_vector_types.h</label>
        <link refid="hcc__detail_2hip__vector__types_8h"/>
        <childnode refid="641" relation="include">
        </childnode>
      </node>
      <node id="656">
        <label>sstream</label>
      </node>
      <node id="664">
        <label>trace_helper.h</label>
        <link refid="trace__helper_8h_source"/>
        <childnode refid="640" relation="include">
        </childnode>
        <childnode refid="665" relation="include">
        </childnode>
        <childnode refid="666" relation="include">
        </childnode>
      </node>
      <node id="633">
        <label>hip/hip_common.h</label>
        <link refid="hip__common_8h_source"/>
      </node>
      <node id="635">
        <label>math.h</label>
      </node>
      <node id="638">
        <label>hip/hip_runtime_api.h</label>
        <link refid="hip__runtime__api_8h_source"/>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="639" relation="include">
        </childnode>
      </node>
      <node id="624">
        <label>hip_hcc_internal.h</label>
        <link refid="hip__hcc__internal_8h_source"/>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
        <childnode refid="627" relation="include">
        </childnode>
        <childnode refid="628" relation="include">
        </childnode>
        <childnode refid="655" relation="include">
        </childnode>
        <childnode refid="663" relation="include">
        </childnode>
      </node>
      <node id="640">
        <label>iostream</label>
      </node>
      <node id="660">
        <label>deque</label>
      </node>
      <node id="653">
        <label>hip/hcc_detail/texture_functions.h</label>
        <link refid="texture__functions_8h_source"/>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="654" relation="include">
        </childnode>
        <childnode refid="643" relation="include">
        </childnode>
      </node>
      <node id="662">
        <label>algorithm</label>
      </node>
      <node id="651">
        <label>hip/hip_vector_types.h</label>
        <link refid="hip__vector__types_8h_source"/>
        <childnode refid="633" relation="include">
        </childnode>
      </node>
      <node id="623">
        <label>HIP/src/env.cpp</label>
        <link refid="env.cpp"/>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="664" relation="include">
        </childnode>
        <childnode refid="663" relation="include">
        </childnode>
      </node>
      <node id="643">
        <label>hip/hcc_detail/hip_texture_types.h</label>
        <link refid="hcc__detail_2hip__texture__types_8h"/>
        <childnode refid="644" relation="include">
        </childnode>
        <childnode refid="645" relation="include">
        </childnode>
        <childnode refid="647" relation="include">
        </childnode>
      </node>
      <node id="630">
        <label>stdio.h</label>
      </node>
      <node id="641">
        <label>hip/hcc_detail/host_defines.h</label>
        <link refid="host__defines_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="env_8cpp_1a909b9051d30b31e4c93e81aa697cc95f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ihipReadEnv_I</definition>
        <argsstring>(int *var_ptr, const char *var_name1, const char *var_name2, const char *description)</argsstring>
        <name>ihipReadEnv_I</name>
        <param>
          <type>int *</type>
          <declname>var_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>var_name1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>var_name2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" line="29" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" bodystart="29" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="env_8cpp_1a0cd50beb9dacd5b9d06228a38b7de6de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ihipReadEnv_S</definition>
        <argsstring>(std::string *var_ptr, const char *var_name1, const char *var_name2, const char *description)</argsstring>
        <name>ihipReadEnv_S</name>
        <param>
          <type>std::string *</type>
          <declname>var_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>var_name1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>var_name2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" line="50" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" bodystart="50" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="env_8cpp_1abf30ada63bb2b7116915d3d69a4ed09a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ihipReadEnv_Callback</definition>
        <argsstring>(void *var_ptr, const char *var_name1, const char *var_name2, const char *description, std::string(*setterCallback)(void *var_ptr, const char *env))</argsstring>
        <name>ihipReadEnv_Callback</name>
        <param>
          <type>void *</type>
          <declname>var_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>var_name1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>var_name2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <param>
          <type>std::string(*)(void *var_ptr, const char *env)</type>
          <declname>setterCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" line="68" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" bodystart="68" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="env_8cpp_1ac9cbf6f3f3d16909bc382a2f2d743195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tokenize</definition>
        <argsstring>(const std::string &amp;s, char delim, std::vector&lt; std::string &gt; *tokens)</argsstring>
        <name>tokenize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delim</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>tokens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" line="89" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" bodystart="89" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="env_8cpp_1ab7082a3a9c1a90ecafa279ed1b094dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim</definition>
        <argsstring>(std::string *s)</argsstring>
        <name>trim</name>
        <param>
          <type>std::string *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" line="100" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" bodystart="100" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="env_8cpp_1af25c9f7da6d74aa8ea4353abbae30959" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ltrim</definition>
        <argsstring>(std::string *s)</argsstring>
        <name>ltrim</name>
        <param>
          <type>std::string *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" line="108" column="1" bodyfile="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp" bodystart="108" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>present<sp/>Advanced<sp/>Micro<sp/>Devices,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="5"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6"><highlight class="comment">in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7"><highlight class="comment">to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="8"><highlight class="comment">copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="9"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline lineno="12"><highlight class="comment">all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="17"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="18"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment">THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hip_hcc_internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;trace_helper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;env.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>environment<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipReadEnv_I(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*var_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_name1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_name2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*description)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>env<sp/>=<sp/>getenv(var_name1);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>second<sp/>name<sp/>if<sp/>first<sp/>not<sp/>defined,<sp/>used<sp/>to<sp/>allow<sp/>HIP_<sp/>or<sp/>CUDA_<sp/>env<sp/>vars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((env<sp/>==<sp/>NULL)<sp/>&amp;&amp;<sp/>strcmp(var_name2,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env<sp/>=<sp/>getenv(var_name2);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>is<sp/>set<sp/>when<sp/>variable<sp/>is<sp/>initialized<sp/>(at<sp/>top<sp/>of<sp/>this<sp/>file),<sp/>so<sp/>only<sp/>override<sp/>if<sp/>we<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>environment<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(env)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>strtol(env,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*var_ptr<sp/>=<sp/>(int)<sp/>(v);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_PRINT_ENV)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;%-30s<sp/>=<sp/>%2d<sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>var_name1,<sp/>*var_ptr,<sp/>description);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipReadEnv_S(std::string<sp/>*var_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_name1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_name2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*description)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>env<sp/>=<sp/>getenv(var_name1);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>second<sp/>name<sp/>if<sp/>first<sp/>not<sp/>defined,<sp/>used<sp/>to<sp/>allow<sp/>HIP_<sp/>or<sp/>CUDA_<sp/>env<sp/>vars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((env<sp/>==<sp/>NULL)<sp/>&amp;&amp;<sp/>strcmp(var_name2,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env<sp/>=<sp/>getenv(var_name2);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(env)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(var_ptr)<sp/>=<sp/>env;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_PRINT_ENV)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;%-30s<sp/>=<sp/>%s<sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>var_name1,<sp/>var_ptr-&gt;c_str(),<sp/>description);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ihipReadEnv_Callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*var_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_name1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_name2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*description,<sp/>std::string<sp/>(*setterCallback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>var_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>env))</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>env<sp/>=<sp/>getenv(var_name1);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>second<sp/>name<sp/>if<sp/>first<sp/>not<sp/>defined,<sp/>used<sp/>to<sp/>allow<sp/>HIP_<sp/>or<sp/>CUDA_<sp/>env<sp/>vars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((env<sp/>==<sp/>NULL)<sp/>&amp;&amp;<sp/>strcmp(var_name2,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env<sp/>=<sp/>getenv(var_name2);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>var_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(env)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_string<sp/>=<sp/>setterCallback(var_ptr,<sp/>env);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIP_PRINT_ENV)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;%-30s<sp/>=<sp/>%s<sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>var_name1,<sp/>var_string.c_str(),<sp/>description);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tokenize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delim,<sp/>std::vector&lt;std::string&gt;<sp/>*tokens)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str(s);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>item;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(getline(ss,<sp/>item,<sp/>delim))<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.erase<sp/>(std::remove<sp/>(item.begin(),<sp/>item.end(),<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">),<sp/>item.end());<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>whitespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens-&gt;push_back(item);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>trim(std::string<sp/>*s)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trim<sp/>whitespace<sp/>from<sp/>beginning<sp/>and<sp/>end:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\n\r\f\v&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;erase(0,<sp/>s-&gt;find_first_not_of(t));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;erase(s-&gt;find_last_not_of(t)+1);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ltrim(std::string<sp/>*s)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trim<sp/>whitespace<sp/>from<sp/>beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\n\r\f\v&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;erase(0,<sp/>s-&gt;find_first_not_of(t));</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mohit/Desktop/doxygen/hip/HIP/src/env.cpp"/>
  </compounddef>
</doxygen>
